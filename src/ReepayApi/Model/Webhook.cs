/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// Webhook
    /// </summary>
    [DataContract]
    public partial class Webhook :  IEquatable<Webhook>
    {
        /// <summary>
        /// The webhook state, one of the following: `pending`, `disabled`, `failed`, `completed`
        /// </summary>
        /// <value>The webhook state, one of the following: `pending`, `disabled`, `failed`, `completed`</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Disabled for "disabled"
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled,
            
            /// <summary>
            /// Enum Failed for "failed"
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed,
            
            /// <summary>
            /// Enum Completed for "completed"
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed
        }

        /// <summary>
        /// The webhook state, one of the following: `pending`, `disabled`, `failed`, `completed`
        /// </summary>
        /// <value>The webhook state, one of the following: `pending`, `disabled`, `failed`, `completed`</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        [JsonConstructor]
        public Webhook()
        {
        }
        
        /// <summary>
        /// Unique webhook id assigned by Reepay
        /// </summary>
        /// <value>Unique webhook id assigned by Reepay</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }
        /// <summary>
        /// Event id of the event this webhook is for
        /// </summary>
        /// <value>Event id of the event this webhook is for</value>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string _Event { get; private set; }
        /// <summary>
        /// Webhook url
        /// </summary>
        /// <value>Webhook url</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; private set; }
        /// <summary>
        /// Optional basic auth username
        /// </summary>
        /// <value>Optional basic auth username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; private set; }
        /// <summary>
        /// Optional basic auth password (masked)
        /// </summary>
        /// <value>Optional basic auth password (masked)</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; private set; }
        /// <summary>
        /// JSON content of the webhook
        /// </summary>
        /// <value>JSON content of the webhook</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; private set; }
        /// <summary>
        /// Creation date in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Creation date in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }
        /// <summary>
        /// Date of successful invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date of successful invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public DateTime? Success { get; private set; }
        /// <summary>
        /// Number of invocations performed
        /// </summary>
        /// <value>Number of invocations performed</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; private set; }
        /// <summary>
        /// Date of last failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date of last failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="last_fail", EmitDefaultValue=false)]
        public DateTime? LastFail { get; private set; }
        /// <summary>
        /// Date of first failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date of first failed invocation in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="first_fail", EmitDefaultValue=false)]
        public DateTime? FirstFail { get; private set; }
        /// <summary>
        /// Number of failed invocations before an alert email is sent
        /// </summary>
        /// <value>Number of failed invocations before an alert email is sent</value>
        [DataMember(Name="alert_count", EmitDefaultValue=false)]
        public int? AlertCount { get; private set; }
        /// <summary>
        /// Date when an optional alert email sending was requested in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when an optional alert email sending was requested in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="alert_sent", EmitDefaultValue=false)]
        public DateTime? AlertSent { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  LastFail: ").Append(LastFail).Append("\n");
            sb.Append("  FirstFail: ").Append(FirstFail).Append("\n");
            sb.Append("  AlertCount: ").Append(AlertCount).Append("\n");
            sb.Append("  AlertSent: ").Append(AlertSent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="other">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this._Event == other._Event ||
                    this._Event != null &&
                    this._Event.Equals(other._Event)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                ) && 
                (
                    this.LastFail == other.LastFail ||
                    this.LastFail != null &&
                    this.LastFail.Equals(other.LastFail)
                ) && 
                (
                    this.FirstFail == other.FirstFail ||
                    this.FirstFail != null &&
                    this.FirstFail.Equals(other.FirstFail)
                ) && 
                (
                    this.AlertCount == other.AlertCount ||
                    this.AlertCount != null &&
                    this.AlertCount.Equals(other.AlertCount)
                ) && 
                (
                    this.AlertSent == other.AlertSent ||
                    this.AlertSent != null &&
                    this.AlertSent.Equals(other.AlertSent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this._Event != null)
                    hash = hash * 59 + this._Event.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                if (this.LastFail != null)
                    hash = hash * 59 + this.LastFail.GetHashCode();
                if (this.FirstFail != null)
                    hash = hash * 59 + this.FirstFail.GetHashCode();
                if (this.AlertCount != null)
                    hash = hash * 59 + this.AlertCount.GetHashCode();
                if (this.AlertSent != null)
                    hash = hash * 59 + this.AlertSent.GetHashCode();
                return hash;
            }
        }
    }

}
