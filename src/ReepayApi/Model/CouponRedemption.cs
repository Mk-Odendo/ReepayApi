/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// CouponRedemption
    /// </summary>
    [DataContract]
    public partial class CouponRedemption :  IEquatable<CouponRedemption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponRedemption" /> class.
        /// </summary>
        [JsonConstructor]
        protected CouponRedemption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponRedemption" /> class.
        /// </summary>
        /// <param name="Coupon">Coupon redeemed (required).</param>
        /// <param name="SubscriptionDiscount">Subscription discount released by coupon (required).</param>
        public CouponRedemption(Coupon Coupon = null, SubscriptionDiscount SubscriptionDiscount = null)
        {
            // to ensure "Coupon" is required (not null)
            if (Coupon == null)
            {
                throw new InvalidDataException("Coupon is a required property for CouponRedemption and cannot be null");
            }
            else
            {
                this.Coupon = Coupon;
            }
            // to ensure "SubscriptionDiscount" is required (not null)
            if (SubscriptionDiscount == null)
            {
                throw new InvalidDataException("SubscriptionDiscount is a required property for CouponRedemption and cannot be null");
            }
            else
            {
                this.SubscriptionDiscount = SubscriptionDiscount;
            }
        }
        
        /// <summary>
        /// Coupon redeemed
        /// </summary>
        /// <value>Coupon redeemed</value>
        [DataMember(Name="coupon", EmitDefaultValue=false)]
        public Coupon Coupon { get; set; }
        /// <summary>
        /// Subscription discount released by coupon
        /// </summary>
        /// <value>Subscription discount released by coupon</value>
        [DataMember(Name="subscription_discount", EmitDefaultValue=false)]
        public SubscriptionDiscount SubscriptionDiscount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponRedemption {\n");
            sb.Append("  Coupon: ").Append(Coupon).Append("\n");
            sb.Append("  SubscriptionDiscount: ").Append(SubscriptionDiscount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CouponRedemption);
        }

        /// <summary>
        /// Returns true if CouponRedemption instances are equal
        /// </summary>
        /// <param name="other">Instance of CouponRedemption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponRedemption other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Coupon == other.Coupon ||
                    this.Coupon != null &&
                    this.Coupon.Equals(other.Coupon)
                ) && 
                (
                    this.SubscriptionDiscount == other.SubscriptionDiscount ||
                    this.SubscriptionDiscount != null &&
                    this.SubscriptionDiscount.Equals(other.SubscriptionDiscount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Coupon != null)
                    hash = hash * 59 + this.Coupon.GetHashCode();
                if (this.SubscriptionDiscount != null)
                    hash = hash * 59 + this.SubscriptionDiscount.GetHashCode();
                return hash;
            }
        }
    }

}
