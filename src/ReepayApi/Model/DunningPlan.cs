/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// DunningPlan
    /// </summary>
    [DataContract]
    public partial class DunningPlan :  IEquatable<DunningPlan>
    {
        /// <summary>
        /// State of dunning plan, one of the following: `active`, `deleted`.
        /// </summary>
        /// <value>State of dunning plan, one of the following: `active`, `deleted`.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Active for "active"
            /// </summary>
            [EnumMember(Value = "active")]
            Active,
            
            /// <summary>
            /// Enum Deleted for "deleted"
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted
        }

        /// <summary>
        /// Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`
        /// </summary>
        /// <value>Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FinalSubscriptionActionEnum
        {
            
            /// <summary>
            /// Enum Expire for "expire"
            /// </summary>
            [EnumMember(Value = "expire")]
            Expire,
            
            /// <summary>
            /// Enum Onhold for "on_hold"
            /// </summary>
            [EnumMember(Value = "on_hold")]
            Onhold,
            
            /// <summary>
            /// Enum None for "none"
            /// </summary>
            [EnumMember(Value = "none")]
            None
        }

        /// <summary>
        /// State of dunning plan, one of the following: `active`, `deleted`.
        /// </summary>
        /// <value>State of dunning plan, one of the following: `active`, `deleted`.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`
        /// </summary>
        /// <value>Action to take for subscription if dunning fails, one of the following: `expire`, `on_hold`, `none`</value>
        [DataMember(Name="final_subscription_action", EmitDefaultValue=false)]
        public FinalSubscriptionActionEnum? FinalSubscriptionAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DunningPlan" /> class.
        /// </summary>
        [JsonConstructor]
        protected DunningPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DunningPlan" /> class.
        /// </summary>
        /// <param name="Name">Dunning plan name (required).</param>
        /// <param name="Schedule">The schedule as list of intervals in days (required).</param>
        /// <param name="Handle">Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. (required).</param>
        /// <param name="State">State of dunning plan, one of the following: &#x60;active&#x60;, &#x60;deleted&#x60;. (required).</param>
        /// <param name="Created">Date when the dunning plan was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format. (required).</param>
        /// <param name="DefaultPlan">If this is default plan (required) (default to false).</param>
        public DunningPlan(string Name = null, List<int?> Schedule = null, string Handle = null, StateEnum? State = null, DateTime? Created = null, bool? DefaultPlan = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for DunningPlan and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Schedule" is required (not null)
            if (Schedule == null)
            {
                throw new InvalidDataException("Schedule is a required property for DunningPlan and cannot be null");
            }
            else
            {
                this.Schedule = Schedule;
            }
            // to ensure "Handle" is required (not null)
            if (Handle == null)
            {
                throw new InvalidDataException("Handle is a required property for DunningPlan and cannot be null");
            }
            else
            {
                this.Handle = Handle;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for DunningPlan and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "Created" is required (not null)
            if (Created == null)
            {
                throw new InvalidDataException("Created is a required property for DunningPlan and cannot be null");
            }
            else
            {
                this.Created = Created;
            }
            // to ensure "DefaultPlan" is required (not null)
            if (DefaultPlan == null)
            {
                throw new InvalidDataException("DefaultPlan is a required property for DunningPlan and cannot be null");
            }
            else
            {
                this.DefaultPlan = DefaultPlan;
            }
        }
        
        /// <summary>
        /// Dunning plan name
        /// </summary>
        /// <value>Dunning plan name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The schedule as list of intervals in days
        /// </summary>
        /// <value>The schedule as list of intervals in days</value>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public List<int?> Schedule { get; set; }
        /// <summary>
        /// Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
        /// </summary>
        /// <value>Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].</value>
        [DataMember(Name="handle", EmitDefaultValue=false)]
        public string Handle { get; set; }
        /// <summary>
        /// Date when the dunning plan was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the dunning plan was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// If this is default plan
        /// </summary>
        /// <value>If this is default plan</value>
        [DataMember(Name="default_plan", EmitDefaultValue=false)]
        public bool? DefaultPlan { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DunningPlan {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DefaultPlan: ").Append(DefaultPlan).Append("\n");
            sb.Append("  FinalSubscriptionAction: ").Append(FinalSubscriptionAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DunningPlan);
        }

        /// <summary>
        /// Returns true if DunningPlan instances are equal
        /// </summary>
        /// <param name="other">Instance of DunningPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DunningPlan other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Schedule == other.Schedule ||
                    this.Schedule != null &&
                    this.Schedule.SequenceEqual(other.Schedule)
                ) && 
                (
                    this.Handle == other.Handle ||
                    this.Handle != null &&
                    this.Handle.Equals(other.Handle)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.DefaultPlan == other.DefaultPlan ||
                    this.DefaultPlan != null &&
                    this.DefaultPlan.Equals(other.DefaultPlan)
                ) && 
                (
                    this.FinalSubscriptionAction == other.FinalSubscriptionAction ||
                    this.FinalSubscriptionAction != null &&
                    this.FinalSubscriptionAction.Equals(other.FinalSubscriptionAction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Schedule != null)
                    hash = hash * 59 + this.Schedule.GetHashCode();
                if (this.Handle != null)
                    hash = hash * 59 + this.Handle.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.DefaultPlan != null)
                    hash = hash * 59 + this.DefaultPlan.GetHashCode();
                if (this.FinalSubscriptionAction != null)
                    hash = hash * 59 + this.FinalSubscriptionAction.GetHashCode();
                return hash;
            }
        }
    }

}
