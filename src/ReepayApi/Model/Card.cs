/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// Card
    /// </summary>
    [DataContract]
    public partial class Card :  IEquatable<Card>
    {
        /// <summary>
        /// State of the payment method: `active`, `inactivated` or `failed`
        /// </summary>
        /// <value>State of the payment method: `active`, `inactivated` or `failed`</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Active for "active"
            /// </summary>
            [EnumMember(Value = "active")]
            Active,
            
            /// <summary>
            /// Enum Inactivated for "inactivated"
            /// </summary>
            [EnumMember(Value = "inactivated")]
            Inactivated,
            
            /// <summary>
            /// Enum Failed for "failed"
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed
        }

        /// <summary>
        /// Card type
        /// </summary>
        /// <value>Card type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardTypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Visa for "visa"
            /// </summary>
            [EnumMember(Value = "visa")]
            Visa,
            
            /// <summary>
            /// Enum Mc for "mc"
            /// </summary>
            [EnumMember(Value = "mc")]
            Mc,
            
            /// <summary>
            /// Enum Dankort for "dankort"
            /// </summary>
            [EnumMember(Value = "dankort")]
            Dankort,
            
            /// <summary>
            /// Enum Visadk for "visa_dk"
            /// </summary>
            [EnumMember(Value = "visa_dk")]
            Visadk,
            
            /// <summary>
            /// Enum Visaelec for "visa_elec"
            /// </summary>
            [EnumMember(Value = "visa_elec")]
            Visaelec,
            
            /// <summary>
            /// Enum Maestro for "maestro"
            /// </summary>
            [EnumMember(Value = "maestro")]
            Maestro,
            
            /// <summary>
            /// Enum Laser for "laser"
            /// </summary>
            [EnumMember(Value = "laser")]
            Laser,
            
            /// <summary>
            /// Enum Amex for "amex"
            /// </summary>
            [EnumMember(Value = "amex")]
            Amex,
            
            /// <summary>
            /// Enum Diners for "diners"
            /// </summary>
            [EnumMember(Value = "diners")]
            Diners,
            
            /// <summary>
            /// Enum Discover for "discover"
            /// </summary>
            [EnumMember(Value = "discover")]
            Discover,
            
            /// <summary>
            /// Enum Jcb for "jcb"
            /// </summary>
            [EnumMember(Value = "jcb")]
            Jcb
        }

        /// <summary>
        /// State of the payment method: `active`, `inactivated` or `failed`
        /// </summary>
        /// <value>State of the payment method: `active`, `inactivated` or `failed`</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Card type
        /// </summary>
        /// <value>Card type</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public CardTypeEnum? CardType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        [JsonConstructor]
        protected Card() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        /// <param name="GwRef">Card gateway reference id (required).</param>
        public Card(string GwRef = null)
        {
            // to ensure "GwRef" is required (not null)
            if (GwRef == null)
            {
                throw new InvalidDataException("GwRef is a required property for Card and cannot be null");
            }
            else
            {
                this.GwRef = GwRef;
            }
        }
        
        /// <summary>
        /// Unique id for payment method
        /// </summary>
        /// <value>Unique id for payment method</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }
        /// <summary>
        /// Customer by handle
        /// </summary>
        /// <value>Customer by handle</value>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public string Customer { get; private set; }
        /// <summary>
        /// Date when the payment method failed. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Date when the payment method failed. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public DateTime? Failed { get; private set; }
        /// <summary>
        /// Date when the payment method was created. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Date when the payment method was created. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }
        /// <summary>
        /// Card gateway reference id
        /// </summary>
        /// <value>Card gateway reference id</value>
        [DataMember(Name="gw_ref", EmitDefaultValue=false)]
        public string GwRef { get; set; }
        /// <summary>
        /// Card expire date on form MM-YY 
        /// </summary>
        /// <value>Card expire date on form MM-YY </value>
        [DataMember(Name="exp_date", EmitDefaultValue=false)]
        public string ExpDate { get; private set; }
        /// <summary>
        /// Masked card number
        /// </summary>
        /// <value>Masked card number</value>
        [DataMember(Name="masked_card", EmitDefaultValue=false)]
        public string MaskedCard { get; private set; }
        /// <summary>
        /// Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="last_success", EmitDefaultValue=false)]
        public DateTime? LastSuccess { get; private set; }
        /// <summary>
        /// Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="last_failed", EmitDefaultValue=false)]
        public DateTime? LastFailed { get; private set; }
        /// <summary>
        /// Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="first_fail", EmitDefaultValue=false)]
        public DateTime? FirstFail { get; private set; }
        /// <summary>
        /// An error code from the last failed use of the card
        /// </summary>
        /// <value>An error code from the last failed use of the card</value>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public string ErrorCode { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  GwRef: ").Append(GwRef).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  ExpDate: ").Append(ExpDate).Append("\n");
            sb.Append("  MaskedCard: ").Append(MaskedCard).Append("\n");
            sb.Append("  LastSuccess: ").Append(LastSuccess).Append("\n");
            sb.Append("  LastFailed: ").Append(LastFailed).Append("\n");
            sb.Append("  FirstFail: ").Append(FirstFail).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Card);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="other">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Failed == other.Failed ||
                    this.Failed != null &&
                    this.Failed.Equals(other.Failed)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.GwRef == other.GwRef ||
                    this.GwRef != null &&
                    this.GwRef.Equals(other.GwRef)
                ) && 
                (
                    this.CardType == other.CardType ||
                    this.CardType != null &&
                    this.CardType.Equals(other.CardType)
                ) && 
                (
                    this.ExpDate == other.ExpDate ||
                    this.ExpDate != null &&
                    this.ExpDate.Equals(other.ExpDate)
                ) && 
                (
                    this.MaskedCard == other.MaskedCard ||
                    this.MaskedCard != null &&
                    this.MaskedCard.Equals(other.MaskedCard)
                ) && 
                (
                    this.LastSuccess == other.LastSuccess ||
                    this.LastSuccess != null &&
                    this.LastSuccess.Equals(other.LastSuccess)
                ) && 
                (
                    this.LastFailed == other.LastFailed ||
                    this.LastFailed != null &&
                    this.LastFailed.Equals(other.LastFailed)
                ) && 
                (
                    this.FirstFail == other.FirstFail ||
                    this.FirstFail != null &&
                    this.FirstFail.Equals(other.FirstFail)
                ) && 
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.Failed != null)
                    hash = hash * 59 + this.Failed.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.GwRef != null)
                    hash = hash * 59 + this.GwRef.GetHashCode();
                if (this.CardType != null)
                    hash = hash * 59 + this.CardType.GetHashCode();
                if (this.ExpDate != null)
                    hash = hash * 59 + this.ExpDate.GetHashCode();
                if (this.MaskedCard != null)
                    hash = hash * 59 + this.MaskedCard.GetHashCode();
                if (this.LastSuccess != null)
                    hash = hash * 59 + this.LastSuccess.GetHashCode();
                if (this.LastFailed != null)
                    hash = hash * 59 + this.LastFailed.GetHashCode();
                if (this.FirstFail != null)
                    hash = hash * 59 + this.FirstFail.GetHashCode();
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                return hash;
            }
        }
    }

}
