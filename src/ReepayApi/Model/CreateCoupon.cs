/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// CreateCoupon
    /// </summary>
    [DataContract]
    public partial class CreateCoupon :  IEquatable<CreateCoupon>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCoupon" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateCoupon() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCoupon" /> class.
        /// </summary>
        /// <param name="Name">Internal name for the coupon. (required).</param>
        /// <param name="Handle">Per account unique handle for the coupon (required).</param>
        /// <param name="Code">The coupon code. Maximum 100 characters. (required).</param>
        /// <param name="Discount">Discount to use for coupon (required).</param>
        /// <param name="AllPlans">Whether all plans are eligible for this coupon. Defaults to false. (default to false).</param>
        /// <param name="EligiblePlans">If not all_plans are set to true, then the set of eligible plan handles must be defined..</param>
        /// <param name="MaxRedemptions">Optional maximum number of times this coupon can be redeemed..</param>
        /// <param name="ValidUntil">Optional date and time until which the coupon is redeemable. Date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;..</param>
        public CreateCoupon(string Name = null, string Handle = null, string Code = null, string Discount = null, bool? AllPlans = null, List<string> EligiblePlans = null, int? MaxRedemptions = null, string ValidUntil = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateCoupon and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Handle" is required (not null)
            if (Handle == null)
            {
                throw new InvalidDataException("Handle is a required property for CreateCoupon and cannot be null");
            }
            else
            {
                this.Handle = Handle;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for CreateCoupon and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Discount" is required (not null)
            if (Discount == null)
            {
                throw new InvalidDataException("Discount is a required property for CreateCoupon and cannot be null");
            }
            else
            {
                this.Discount = Discount;
            }
            // use default value if no "AllPlans" provided
            if (AllPlans == null)
            {
                this.AllPlans = false;
            }
            else
            {
                this.AllPlans = AllPlans;
            }
            this.EligiblePlans = EligiblePlans;
            this.MaxRedemptions = MaxRedemptions;
            this.ValidUntil = ValidUntil;
        }
        
        /// <summary>
        /// Internal name for the coupon.
        /// </summary>
        /// <value>Internal name for the coupon.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Per account unique handle for the coupon
        /// </summary>
        /// <value>Per account unique handle for the coupon</value>
        [DataMember(Name="handle", EmitDefaultValue=false)]
        public string Handle { get; set; }
        /// <summary>
        /// The coupon code. Maximum 100 characters.
        /// </summary>
        /// <value>The coupon code. Maximum 100 characters.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Discount to use for coupon
        /// </summary>
        /// <value>Discount to use for coupon</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public string Discount { get; set; }
        /// <summary>
        /// Whether all plans are eligible for this coupon. Defaults to false.
        /// </summary>
        /// <value>Whether all plans are eligible for this coupon. Defaults to false.</value>
        [DataMember(Name="all_plans", EmitDefaultValue=false)]
        public bool? AllPlans { get; set; }
        /// <summary>
        /// If not all_plans are set to true, then the set of eligible plan handles must be defined.
        /// </summary>
        /// <value>If not all_plans are set to true, then the set of eligible plan handles must be defined.</value>
        [DataMember(Name="eligible_plans", EmitDefaultValue=false)]
        public List<string> EligiblePlans { get; set; }
        /// <summary>
        /// Optional maximum number of times this coupon can be redeemed.
        /// </summary>
        /// <value>Optional maximum number of times this coupon can be redeemed.</value>
        [DataMember(Name="max_redemptions", EmitDefaultValue=false)]
        public int? MaxRedemptions { get; set; }
        /// <summary>
        /// Optional date and time until which the coupon is redeemable. Date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;.
        /// </summary>
        /// <value>Optional date and time until which the coupon is redeemable. Date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;.</value>
        [DataMember(Name="valid_until", EmitDefaultValue=false)]
        public string ValidUntil { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCoupon {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  AllPlans: ").Append(AllPlans).Append("\n");
            sb.Append("  EligiblePlans: ").Append(EligiblePlans).Append("\n");
            sb.Append("  MaxRedemptions: ").Append(MaxRedemptions).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateCoupon);
        }

        /// <summary>
        /// Returns true if CreateCoupon instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateCoupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCoupon other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Handle == other.Handle ||
                    this.Handle != null &&
                    this.Handle.Equals(other.Handle)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Discount == other.Discount ||
                    this.Discount != null &&
                    this.Discount.Equals(other.Discount)
                ) && 
                (
                    this.AllPlans == other.AllPlans ||
                    this.AllPlans != null &&
                    this.AllPlans.Equals(other.AllPlans)
                ) && 
                (
                    this.EligiblePlans == other.EligiblePlans ||
                    this.EligiblePlans != null &&
                    this.EligiblePlans.SequenceEqual(other.EligiblePlans)
                ) && 
                (
                    this.MaxRedemptions == other.MaxRedemptions ||
                    this.MaxRedemptions != null &&
                    this.MaxRedemptions.Equals(other.MaxRedemptions)
                ) && 
                (
                    this.ValidUntil == other.ValidUntil ||
                    this.ValidUntil != null &&
                    this.ValidUntil.Equals(other.ValidUntil)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Handle != null)
                    hash = hash * 59 + this.Handle.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Discount != null)
                    hash = hash * 59 + this.Discount.GetHashCode();
                if (this.AllPlans != null)
                    hash = hash * 59 + this.AllPlans.GetHashCode();
                if (this.EligiblePlans != null)
                    hash = hash * 59 + this.EligiblePlans.GetHashCode();
                if (this.MaxRedemptions != null)
                    hash = hash * 59 + this.MaxRedemptions.GetHashCode();
                if (this.ValidUntil != null)
                    hash = hash * 59 + this.ValidUntil.GetHashCode();
                return hash;
            }
        }
    }

}
