/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ReepayApi.Client;
using ReepayApi.Model;

namespace ReepayApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel pending plan change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Subscription</returns>
        Subscription CancelChangePlan (string handle);

        /// <summary>
        /// Cancel pending plan change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> CancelChangePlanWithHttpInfo (string handle);
        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        Subscription CancelSubscription (string handle, CancelSubscription body = null);

        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> CancelSubscriptionWithHttpInfo (string handle, CancelSubscription body = null);
        /// <summary>
        /// Change next renewal date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        Subscription ChangeNextPeriodStartJson (string handle, ChangeNextPeriodStart body = null);

        /// <summary>
        /// Change next renewal date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> ChangeNextPeriodStartJsonWithHttpInfo (string handle, ChangeNextPeriodStart body = null);
        /// <summary>
        /// Change plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        Subscription ChangePlanJson (string handle, ChangePlan body = null);

        /// <summary>
        /// Change plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> ChangePlanJsonWithHttpInfo (string handle, ChangePlan body = null);
        /// <summary>
        /// Add subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SubscriptionDiscount</returns>
        SubscriptionDiscount CreateSubscriptionDiscount (string handle, CreateSubscriptionDiscount body = null);

        /// <summary>
        /// Add subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SubscriptionDiscount</returns>
        ApiResponse<SubscriptionDiscount> CreateSubscriptionDiscountWithHttpInfo (string handle, CreateSubscriptionDiscount body = null);
        /// <summary>
        /// Create invoice ondemand for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        Invoice CreateSubscriptionInvoice (string handle, CreateSubscriptionInvoice body = null);

        /// <summary>
        /// Create invoice ondemand for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> CreateSubscriptionInvoiceWithHttpInfo (string handle, CreateSubscriptionInvoice body = null);
        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        Subscription CreateSubscriptionJson (CreateSubscription body = null);

        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> CreateSubscriptionJsonWithHttpInfo (CreateSubscription body = null);
        /// <summary>
        /// Delete subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>SubscriptionDiscount</returns>
        SubscriptionDiscount DeleteSubscriptionDiscount (string handle, string sdHandle);

        /// <summary>
        /// Delete subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>ApiResponse of SubscriptionDiscount</returns>
        ApiResponse<SubscriptionDiscount> DeleteSubscriptionDiscountWithHttpInfo (string handle, string sdHandle);
        /// <summary>
        /// Expire subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        Subscription Expire (string handle, ExpireSubscription body = null);

        /// <summary>
        /// Expire subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> ExpireWithHttpInfo (string handle, ExpireSubscription body = null);
        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Subscription</returns>
        Subscription GetSubscription (string handle);

        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> GetSubscriptionWithHttpInfo (string handle);
        /// <summary>
        /// Get subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>SubscriptionDiscount</returns>
        SubscriptionDiscount GetSubscriptionDiscount (string handle, string sdHandle);

        /// <summary>
        /// Get subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>ApiResponse of SubscriptionDiscount</returns>
        ApiResponse<SubscriptionDiscount> GetSubscriptionDiscountWithHttpInfo (string handle, string sdHandle);
        /// <summary>
        /// Get subscription discounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>List&lt;SubscriptionDiscount&gt;</returns>
        List<SubscriptionDiscount> GetSubscriptionDiscounts (string handle);

        /// <summary>
        /// Get subscription discounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of List&lt;SubscriptionDiscount&gt;</returns>
        ApiResponse<List<SubscriptionDiscount>> GetSubscriptionDiscountsWithHttpInfo (string handle);
        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>PaymentMethods</returns>
        PaymentMethods GetSubscriptionPaymentMethods (string handle);

        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        ApiResponse<PaymentMethods> GetSubscriptionPaymentMethodsWithHttpInfo (string handle);
        /// <summary>
        /// Get the period balance for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>SubscriptionPeriodBalance</returns>
        SubscriptionPeriodBalance GetSubscriptionPeriodBalance (string handle, string date = null);

        /// <summary>
        /// Get the period balance for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>ApiResponse of SubscriptionPeriodBalance</returns>
        ApiResponse<SubscriptionPeriodBalance> GetSubscriptionPeriodBalanceWithHttpInfo (string handle, string date = null);
        /// <summary>
        /// Get list of subscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>SubscriptionSearch</returns>
        SubscriptionSearch GetSubscriptions (int? page = null, int? size = null, string search = null, string sort = null);

        /// <summary>
        /// Get list of subscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>ApiResponse of SubscriptionSearch</returns>
        ApiResponse<SubscriptionSearch> GetSubscriptionsWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null);
        /// <summary>
        /// Calculate interval amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>IntervalAmount</returns>
        IntervalAmount IntervalAmount (string handle, string from, string to);

        /// <summary>
        /// Calculate interval amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>ApiResponse of IntervalAmount</returns>
        ApiResponse<IntervalAmount> IntervalAmountWithHttpInfo (string handle, string from, string to);
        /// <summary>
        /// Subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        Subscription OnHold (string handle, OnHoldSubscription body = null);

        /// <summary>
        /// Subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> OnHoldWithHttpInfo (string handle, OnHoldSubscription body = null);
        /// <summary>
        /// Reactivate subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        Subscription ReactivateSubscription (string handle, ReactivateSubscription body = null);

        /// <summary>
        /// Reactivate subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> ReactivateSubscriptionWithHttpInfo (string handle, ReactivateSubscription body = null);
        /// <summary>
        /// Redeem coupon code for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CouponRedemption</returns>
        CouponRedemption RedeemCouponCode (string handle, RedeemCouponCode body = null);

        /// <summary>
        /// Redeem coupon code for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CouponRedemption</returns>
        ApiResponse<CouponRedemption> RedeemCouponCodeWithHttpInfo (string handle, RedeemCouponCode body = null);
        /// <summary>
        /// Remove all payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>PaymentMethods</returns>
        PaymentMethods RemoveAllPaymentMethods (string handle);

        /// <summary>
        /// Remove all payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        ApiResponse<PaymentMethods> RemoveAllPaymentMethodsWithHttpInfo (string handle);
        /// <summary>
        /// Remove payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>PaymentMethods</returns>
        PaymentMethods RemovePaymentMethod (string handle, string methodId);

        /// <summary>
        /// Remove payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        ApiResponse<PaymentMethods> RemovePaymentMethodWithHttpInfo (string handle, string methodId);
        /// <summary>
        /// Set card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentMethods</returns>
        PaymentMethods SetCardPaymentMethodJson (string handle, SetCardPaymentMethod body = null);

        /// <summary>
        /// Set card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        ApiResponse<PaymentMethods> SetCardPaymentMethodJsonWithHttpInfo (string handle, SetCardPaymentMethod body = null);
        /// <summary>
        /// Uncancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Subscription</returns>
        Subscription Uncancel (string handle);

        /// <summary>
        /// Uncancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> UncancelWithHttpInfo (string handle);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel pending plan change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> CancelChangePlanAsync (string handle);

        /// <summary>
        /// Cancel pending plan change
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> CancelChangePlanAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> CancelSubscriptionAsync (string handle, CancelSubscription body = null);

        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> CancelSubscriptionAsyncWithHttpInfo (string handle, CancelSubscription body = null);
        /// <summary>
        /// Change next renewal date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> ChangeNextPeriodStartJsonAsync (string handle, ChangeNextPeriodStart body = null);

        /// <summary>
        /// Change next renewal date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> ChangeNextPeriodStartJsonAsyncWithHttpInfo (string handle, ChangeNextPeriodStart body = null);
        /// <summary>
        /// Change plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> ChangePlanJsonAsync (string handle, ChangePlan body = null);

        /// <summary>
        /// Change plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> ChangePlanJsonAsyncWithHttpInfo (string handle, ChangePlan body = null);
        /// <summary>
        /// Add subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SubscriptionDiscount</returns>
        System.Threading.Tasks.Task<SubscriptionDiscount> CreateSubscriptionDiscountAsync (string handle, CreateSubscriptionDiscount body = null);

        /// <summary>
        /// Add subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionDiscount>> CreateSubscriptionDiscountAsyncWithHttpInfo (string handle, CreateSubscriptionDiscount body = null);
        /// <summary>
        /// Create invoice ondemand for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> CreateSubscriptionInvoiceAsync (string handle, CreateSubscriptionInvoice body = null);

        /// <summary>
        /// Create invoice ondemand for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> CreateSubscriptionInvoiceAsyncWithHttpInfo (string handle, CreateSubscriptionInvoice body = null);
        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> CreateSubscriptionJsonAsync (CreateSubscription body = null);

        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> CreateSubscriptionJsonAsyncWithHttpInfo (CreateSubscription body = null);
        /// <summary>
        /// Delete subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of SubscriptionDiscount</returns>
        System.Threading.Tasks.Task<SubscriptionDiscount> DeleteSubscriptionDiscountAsync (string handle, string sdHandle);

        /// <summary>
        /// Delete subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of ApiResponse (SubscriptionDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionDiscount>> DeleteSubscriptionDiscountAsyncWithHttpInfo (string handle, string sdHandle);
        /// <summary>
        /// Expire subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> ExpireAsync (string handle, ExpireSubscription body = null);

        /// <summary>
        /// Expire subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> ExpireAsyncWithHttpInfo (string handle, ExpireSubscription body = null);
        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync (string handle);

        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> GetSubscriptionAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of SubscriptionDiscount</returns>
        System.Threading.Tasks.Task<SubscriptionDiscount> GetSubscriptionDiscountAsync (string handle, string sdHandle);

        /// <summary>
        /// Get subscription discount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of ApiResponse (SubscriptionDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionDiscount>> GetSubscriptionDiscountAsyncWithHttpInfo (string handle, string sdHandle);
        /// <summary>
        /// Get subscription discounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of List&lt;SubscriptionDiscount&gt;</returns>
        System.Threading.Tasks.Task<List<SubscriptionDiscount>> GetSubscriptionDiscountsAsync (string handle);

        /// <summary>
        /// Get subscription discounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (List&lt;SubscriptionDiscount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SubscriptionDiscount>>> GetSubscriptionDiscountsAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of PaymentMethods</returns>
        System.Threading.Tasks.Task<PaymentMethods> GetSubscriptionPaymentMethodsAsync (string handle);

        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> GetSubscriptionPaymentMethodsAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get the period balance for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>Task of SubscriptionPeriodBalance</returns>
        System.Threading.Tasks.Task<SubscriptionPeriodBalance> GetSubscriptionPeriodBalanceAsync (string handle, string date = null);

        /// <summary>
        /// Get the period balance for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionPeriodBalance)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionPeriodBalance>> GetSubscriptionPeriodBalanceAsyncWithHttpInfo (string handle, string date = null);
        /// <summary>
        /// Get list of subscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of SubscriptionSearch</returns>
        System.Threading.Tasks.Task<SubscriptionSearch> GetSubscriptionsAsync (int? page = null, int? size = null, string search = null, string sort = null);

        /// <summary>
        /// Get list of subscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionSearch>> GetSubscriptionsAsyncWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null);
        /// <summary>
        /// Calculate interval amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>Task of IntervalAmount</returns>
        System.Threading.Tasks.Task<IntervalAmount> IntervalAmountAsync (string handle, string from, string to);

        /// <summary>
        /// Calculate interval amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>Task of ApiResponse (IntervalAmount)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntervalAmount>> IntervalAmountAsyncWithHttpInfo (string handle, string from, string to);
        /// <summary>
        /// Subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> OnHoldAsync (string handle, OnHoldSubscription body = null);

        /// <summary>
        /// Subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> OnHoldAsyncWithHttpInfo (string handle, OnHoldSubscription body = null);
        /// <summary>
        /// Reactivate subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> ReactivateSubscriptionAsync (string handle, ReactivateSubscription body = null);

        /// <summary>
        /// Reactivate subscription on hold
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> ReactivateSubscriptionAsyncWithHttpInfo (string handle, ReactivateSubscription body = null);
        /// <summary>
        /// Redeem coupon code for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CouponRedemption</returns>
        System.Threading.Tasks.Task<CouponRedemption> RedeemCouponCodeAsync (string handle, RedeemCouponCode body = null);

        /// <summary>
        /// Redeem coupon code for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CouponRedemption)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponRedemption>> RedeemCouponCodeAsyncWithHttpInfo (string handle, RedeemCouponCode body = null);
        /// <summary>
        /// Remove all payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of PaymentMethods</returns>
        System.Threading.Tasks.Task<PaymentMethods> RemoveAllPaymentMethodsAsync (string handle);

        /// <summary>
        /// Remove all payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> RemoveAllPaymentMethodsAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Remove payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of PaymentMethods</returns>
        System.Threading.Tasks.Task<PaymentMethods> RemovePaymentMethodAsync (string handle, string methodId);

        /// <summary>
        /// Remove payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> RemovePaymentMethodAsyncWithHttpInfo (string handle, string methodId);
        /// <summary>
        /// Set card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PaymentMethods</returns>
        System.Threading.Tasks.Task<PaymentMethods> SetCardPaymentMethodJsonAsync (string handle, SetCardPaymentMethod body = null);

        /// <summary>
        /// Set card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> SetCardPaymentMethodJsonAsyncWithHttpInfo (string handle, SetCardPaymentMethod body = null);
        /// <summary>
        /// Uncancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> UncancelAsync (string handle);

        /// <summary>
        /// Uncancel subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> UncancelAsyncWithHttpInfo (string handle);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionApi : ISubscriptionApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel pending plan change 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Subscription</returns>
        public Subscription CancelChangePlan (string handle)
        {
             ApiResponse<Subscription> localVarResponse = CancelChangePlanWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel pending plan change 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > CancelChangePlanWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CancelChangePlan");

            var localVarPath = "/v1/subscription/{handle}/cancel_change_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelChangePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Cancel pending plan change 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> CancelChangePlanAsync (string handle)
        {
             ApiResponse<Subscription> localVarResponse = await CancelChangePlanAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel pending plan change 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> CancelChangePlanAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CancelChangePlan");

            var localVarPath = "/v1/subscription/{handle}/cancel_change_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelChangePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Cancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription CancelSubscription (string handle, CancelSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = CancelSubscriptionWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > CancelSubscriptionWithHttpInfo (string handle, CancelSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CancelSubscription");

            var localVarPath = "/v1/subscription/{handle}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Cancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> CancelSubscriptionAsync (string handle, CancelSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = await CancelSubscriptionAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> CancelSubscriptionAsyncWithHttpInfo (string handle, CancelSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CancelSubscription");

            var localVarPath = "/v1/subscription/{handle}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Change next renewal date 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription ChangeNextPeriodStartJson (string handle, ChangeNextPeriodStart body = null)
        {
             ApiResponse<Subscription> localVarResponse = ChangeNextPeriodStartJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change next renewal date 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > ChangeNextPeriodStartJsonWithHttpInfo (string handle, ChangeNextPeriodStart body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->ChangeNextPeriodStartJson");

            var localVarPath = "/v1/subscription/{handle}/change_next_period_start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeNextPeriodStartJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Change next renewal date 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> ChangeNextPeriodStartJsonAsync (string handle, ChangeNextPeriodStart body = null)
        {
             ApiResponse<Subscription> localVarResponse = await ChangeNextPeriodStartJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change next renewal date 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> ChangeNextPeriodStartJsonAsyncWithHttpInfo (string handle, ChangeNextPeriodStart body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->ChangeNextPeriodStartJson");

            var localVarPath = "/v1/subscription/{handle}/change_next_period_start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeNextPeriodStartJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Change plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription ChangePlanJson (string handle, ChangePlan body = null)
        {
             ApiResponse<Subscription> localVarResponse = ChangePlanJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > ChangePlanJsonWithHttpInfo (string handle, ChangePlan body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->ChangePlanJson");

            var localVarPath = "/v1/subscription/{handle}/change_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Change plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> ChangePlanJsonAsync (string handle, ChangePlan body = null)
        {
             ApiResponse<Subscription> localVarResponse = await ChangePlanJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> ChangePlanJsonAsyncWithHttpInfo (string handle, ChangePlan body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->ChangePlanJson");

            var localVarPath = "/v1/subscription/{handle}/change_plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Add subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SubscriptionDiscount</returns>
        public SubscriptionDiscount CreateSubscriptionDiscount (string handle, CreateSubscriptionDiscount body = null)
        {
             ApiResponse<SubscriptionDiscount> localVarResponse = CreateSubscriptionDiscountWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SubscriptionDiscount</returns>
        public ApiResponse< SubscriptionDiscount > CreateSubscriptionDiscountWithHttpInfo (string handle, CreateSubscriptionDiscount body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CreateSubscriptionDiscount");

            var localVarPath = "/v1/subscription/{handle}/discount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionDiscount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionDiscount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionDiscount)));
            
        }

        /// <summary>
        /// Add subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SubscriptionDiscount</returns>
        public async System.Threading.Tasks.Task<SubscriptionDiscount> CreateSubscriptionDiscountAsync (string handle, CreateSubscriptionDiscount body = null)
        {
             ApiResponse<SubscriptionDiscount> localVarResponse = await CreateSubscriptionDiscountAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionDiscount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionDiscount>> CreateSubscriptionDiscountAsyncWithHttpInfo (string handle, CreateSubscriptionDiscount body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CreateSubscriptionDiscount");

            var localVarPath = "/v1/subscription/{handle}/discount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionDiscount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionDiscount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionDiscount)));
            
        }

        /// <summary>
        /// Create invoice ondemand for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice CreateSubscriptionInvoice (string handle, CreateSubscriptionInvoice body = null)
        {
             ApiResponse<Invoice> localVarResponse = CreateSubscriptionInvoiceWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create invoice ondemand for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > CreateSubscriptionInvoiceWithHttpInfo (string handle, CreateSubscriptionInvoice body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CreateSubscriptionInvoice");

            var localVarPath = "/v1/subscription/{handle}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Create invoice ondemand for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> CreateSubscriptionInvoiceAsync (string handle, CreateSubscriptionInvoice body = null)
        {
             ApiResponse<Invoice> localVarResponse = await CreateSubscriptionInvoiceAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create invoice ondemand for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> CreateSubscriptionInvoiceAsyncWithHttpInfo (string handle, CreateSubscriptionInvoice body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->CreateSubscriptionInvoice");

            var localVarPath = "/v1/subscription/{handle}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Create subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription CreateSubscriptionJson (CreateSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = CreateSubscriptionJsonWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > CreateSubscriptionJsonWithHttpInfo (CreateSubscription body = null)
        {

            var localVarPath = "/v1/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Create subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> CreateSubscriptionJsonAsync (CreateSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = await CreateSubscriptionJsonAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> CreateSubscriptionJsonAsyncWithHttpInfo (CreateSubscription body = null)
        {

            var localVarPath = "/v1/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscriptionJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Delete subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>SubscriptionDiscount</returns>
        public SubscriptionDiscount DeleteSubscriptionDiscount (string handle, string sdHandle)
        {
             ApiResponse<SubscriptionDiscount> localVarResponse = DeleteSubscriptionDiscountWithHttpInfo(handle, sdHandle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>ApiResponse of SubscriptionDiscount</returns>
        public ApiResponse< SubscriptionDiscount > DeleteSubscriptionDiscountWithHttpInfo (string handle, string sdHandle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->DeleteSubscriptionDiscount");
            // verify the required parameter 'sdHandle' is set
            if (sdHandle == null)
                throw new ApiException(400, "Missing required parameter 'sdHandle' when calling SubscriptionApi->DeleteSubscriptionDiscount");

            var localVarPath = "/v1/subscription/{handle}/discount/{sdHandle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (sdHandle != null) localVarPathParams.Add("sdHandle", Configuration.ApiClient.ParameterToString(sdHandle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscriptionDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionDiscount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionDiscount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionDiscount)));
            
        }

        /// <summary>
        /// Delete subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of SubscriptionDiscount</returns>
        public async System.Threading.Tasks.Task<SubscriptionDiscount> DeleteSubscriptionDiscountAsync (string handle, string sdHandle)
        {
             ApiResponse<SubscriptionDiscount> localVarResponse = await DeleteSubscriptionDiscountAsyncWithHttpInfo(handle, sdHandle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of ApiResponse (SubscriptionDiscount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionDiscount>> DeleteSubscriptionDiscountAsyncWithHttpInfo (string handle, string sdHandle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->DeleteSubscriptionDiscount");
            // verify the required parameter 'sdHandle' is set
            if (sdHandle == null)
                throw new ApiException(400, "Missing required parameter 'sdHandle' when calling SubscriptionApi->DeleteSubscriptionDiscount");

            var localVarPath = "/v1/subscription/{handle}/discount/{sdHandle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (sdHandle != null) localVarPathParams.Add("sdHandle", Configuration.ApiClient.ParameterToString(sdHandle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubscriptionDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionDiscount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionDiscount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionDiscount)));
            
        }

        /// <summary>
        /// Expire subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription Expire (string handle, ExpireSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = ExpireWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Expire subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > ExpireWithHttpInfo (string handle, ExpireSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->Expire");

            var localVarPath = "/v1/subscription/{handle}/expire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Expire", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Expire subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> ExpireAsync (string handle, ExpireSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = await ExpireAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Expire subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> ExpireAsyncWithHttpInfo (string handle, ExpireSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->Expire");

            var localVarPath = "/v1/subscription/{handle}/expire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Expire", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Get subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Subscription</returns>
        public Subscription GetSubscription (string handle)
        {
             ApiResponse<Subscription> localVarResponse = GetSubscriptionWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > GetSubscriptionWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscription");

            var localVarPath = "/v1/subscription/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Get subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> GetSubscriptionAsync (string handle)
        {
             ApiResponse<Subscription> localVarResponse = await GetSubscriptionAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> GetSubscriptionAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscription");

            var localVarPath = "/v1/subscription/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Get subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>SubscriptionDiscount</returns>
        public SubscriptionDiscount GetSubscriptionDiscount (string handle, string sdHandle)
        {
             ApiResponse<SubscriptionDiscount> localVarResponse = GetSubscriptionDiscountWithHttpInfo(handle, sdHandle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>ApiResponse of SubscriptionDiscount</returns>
        public ApiResponse< SubscriptionDiscount > GetSubscriptionDiscountWithHttpInfo (string handle, string sdHandle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionDiscount");
            // verify the required parameter 'sdHandle' is set
            if (sdHandle == null)
                throw new ApiException(400, "Missing required parameter 'sdHandle' when calling SubscriptionApi->GetSubscriptionDiscount");

            var localVarPath = "/v1/subscription/{handle}/discount/{sdHandle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (sdHandle != null) localVarPathParams.Add("sdHandle", Configuration.ApiClient.ParameterToString(sdHandle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionDiscount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionDiscount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionDiscount)));
            
        }

        /// <summary>
        /// Get subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of SubscriptionDiscount</returns>
        public async System.Threading.Tasks.Task<SubscriptionDiscount> GetSubscriptionDiscountAsync (string handle, string sdHandle)
        {
             ApiResponse<SubscriptionDiscount> localVarResponse = await GetSubscriptionDiscountAsyncWithHttpInfo(handle, sdHandle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscription discount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="sdHandle">Subscription discount handle</param>
        /// <returns>Task of ApiResponse (SubscriptionDiscount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionDiscount>> GetSubscriptionDiscountAsyncWithHttpInfo (string handle, string sdHandle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionDiscount");
            // verify the required parameter 'sdHandle' is set
            if (sdHandle == null)
                throw new ApiException(400, "Missing required parameter 'sdHandle' when calling SubscriptionApi->GetSubscriptionDiscount");

            var localVarPath = "/v1/subscription/{handle}/discount/{sdHandle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (sdHandle != null) localVarPathParams.Add("sdHandle", Configuration.ApiClient.ParameterToString(sdHandle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionDiscount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionDiscount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionDiscount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionDiscount)));
            
        }

        /// <summary>
        /// Get subscription discounts 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>List&lt;SubscriptionDiscount&gt;</returns>
        public List<SubscriptionDiscount> GetSubscriptionDiscounts (string handle)
        {
             ApiResponse<List<SubscriptionDiscount>> localVarResponse = GetSubscriptionDiscountsWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription discounts 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of List&lt;SubscriptionDiscount&gt;</returns>
        public ApiResponse< List<SubscriptionDiscount> > GetSubscriptionDiscountsWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionDiscounts");

            var localVarPath = "/v1/subscription/{handle}/discount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionDiscounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubscriptionDiscount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SubscriptionDiscount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubscriptionDiscount>)));
            
        }

        /// <summary>
        /// Get subscription discounts 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of List&lt;SubscriptionDiscount&gt;</returns>
        public async System.Threading.Tasks.Task<List<SubscriptionDiscount>> GetSubscriptionDiscountsAsync (string handle)
        {
             ApiResponse<List<SubscriptionDiscount>> localVarResponse = await GetSubscriptionDiscountsAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscription discounts 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (List&lt;SubscriptionDiscount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SubscriptionDiscount>>> GetSubscriptionDiscountsAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionDiscounts");

            var localVarPath = "/v1/subscription/{handle}/discount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionDiscounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SubscriptionDiscount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SubscriptionDiscount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SubscriptionDiscount>)));
            
        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>PaymentMethods</returns>
        public PaymentMethods GetSubscriptionPaymentMethods (string handle)
        {
             ApiResponse<PaymentMethods> localVarResponse = GetSubscriptionPaymentMethodsWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        public ApiResponse< PaymentMethods > GetSubscriptionPaymentMethodsWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionPaymentMethods");

            var localVarPath = "/v1/subscription/{handle}/payment_method";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of PaymentMethods</returns>
        public async System.Threading.Tasks.Task<PaymentMethods> GetSubscriptionPaymentMethodsAsync (string handle)
        {
             ApiResponse<PaymentMethods> localVarResponse = await GetSubscriptionPaymentMethodsAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> GetSubscriptionPaymentMethodsAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionPaymentMethods");

            var localVarPath = "/v1/subscription/{handle}/payment_method";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Get the period balance for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>SubscriptionPeriodBalance</returns>
        public SubscriptionPeriodBalance GetSubscriptionPeriodBalance (string handle, string date = null)
        {
             ApiResponse<SubscriptionPeriodBalance> localVarResponse = GetSubscriptionPeriodBalanceWithHttpInfo(handle, date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the period balance for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>ApiResponse of SubscriptionPeriodBalance</returns>
        public ApiResponse< SubscriptionPeriodBalance > GetSubscriptionPeriodBalanceWithHttpInfo (string handle, string date = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionPeriodBalance");

            var localVarPath = "/v1/subscription/{handle}/period_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionPeriodBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionPeriodBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionPeriodBalance) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionPeriodBalance)));
            
        }

        /// <summary>
        /// Get the period balance for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>Task of SubscriptionPeriodBalance</returns>
        public async System.Threading.Tasks.Task<SubscriptionPeriodBalance> GetSubscriptionPeriodBalanceAsync (string handle, string date = null)
        {
             ApiResponse<SubscriptionPeriodBalance> localVarResponse = await GetSubscriptionPeriodBalanceAsyncWithHttpInfo(handle, date);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the period balance for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="date">Optional period date (default now) on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionPeriodBalance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionPeriodBalance>> GetSubscriptionPeriodBalanceAsyncWithHttpInfo (string handle, string date = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->GetSubscriptionPeriodBalance");

            var localVarPath = "/v1/subscription/{handle}/period_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionPeriodBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionPeriodBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionPeriodBalance) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionPeriodBalance)));
            
        }

        /// <summary>
        /// Get list of subscriptions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>SubscriptionSearch</returns>
        public SubscriptionSearch GetSubscriptions (int? page = null, int? size = null, string search = null, string sort = null)
        {
             ApiResponse<SubscriptionSearch> localVarResponse = GetSubscriptionsWithHttpInfo(page, size, search, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of subscriptions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>ApiResponse of SubscriptionSearch</returns>
        public ApiResponse< SubscriptionSearch > GetSubscriptionsWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null)
        {

            var localVarPath = "/v1/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionSearch)));
            
        }

        /// <summary>
        /// Get list of subscriptions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of SubscriptionSearch</returns>
        public async System.Threading.Tasks.Task<SubscriptionSearch> GetSubscriptionsAsync (int? page = null, int? size = null, string search = null, string sort = null)
        {
             ApiResponse<SubscriptionSearch> localVarResponse = await GetSubscriptionsAsyncWithHttpInfo(page, size, search, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of subscriptions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of ApiResponse (SubscriptionSearch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionSearch>> GetSubscriptionsAsyncWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null)
        {

            var localVarPath = "/v1/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionSearch)));
            
        }

        /// <summary>
        /// Calculate interval amount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>IntervalAmount</returns>
        public IntervalAmount IntervalAmount (string handle, string from, string to)
        {
             ApiResponse<IntervalAmount> localVarResponse = IntervalAmountWithHttpInfo(handle, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate interval amount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>ApiResponse of IntervalAmount</returns>
        public ApiResponse< IntervalAmount > IntervalAmountWithHttpInfo (string handle, string from, string to)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->IntervalAmount");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling SubscriptionApi->IntervalAmount");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SubscriptionApi->IntervalAmount");

            var localVarPath = "/v1/subscription/{handle}/interval_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntervalAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntervalAmount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntervalAmount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntervalAmount)));
            
        }

        /// <summary>
        /// Calculate interval amount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>Task of IntervalAmount</returns>
        public async System.Threading.Tasks.Task<IntervalAmount> IntervalAmountAsync (string handle, string from, string to)
        {
             ApiResponse<IntervalAmount> localVarResponse = await IntervalAmountAsyncWithHttpInfo(handle, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate interval amount 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="from">From date on the form yyyy-MM-dd</param>
        /// <param name="to">To date on the form yyyy-MM-dd</param>
        /// <returns>Task of ApiResponse (IntervalAmount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IntervalAmount>> IntervalAmountAsyncWithHttpInfo (string handle, string from, string to)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->IntervalAmount");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling SubscriptionApi->IntervalAmount");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling SubscriptionApi->IntervalAmount");

            var localVarPath = "/v1/subscription/{handle}/interval_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IntervalAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IntervalAmount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IntervalAmount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IntervalAmount)));
            
        }

        /// <summary>
        /// Subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription OnHold (string handle, OnHoldSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = OnHoldWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > OnHoldWithHttpInfo (string handle, OnHoldSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->OnHold");

            var localVarPath = "/v1/subscription/{handle}/on_hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> OnHoldAsync (string handle, OnHoldSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = await OnHoldAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> OnHoldAsyncWithHttpInfo (string handle, OnHoldSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->OnHold");

            var localVarPath = "/v1/subscription/{handle}/on_hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OnHold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Reactivate subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription ReactivateSubscription (string handle, ReactivateSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = ReactivateSubscriptionWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reactivate subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > ReactivateSubscriptionWithHttpInfo (string handle, ReactivateSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->ReactivateSubscription");

            var localVarPath = "/v1/subscription/{handle}/reactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReactivateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Reactivate subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> ReactivateSubscriptionAsync (string handle, ReactivateSubscription body = null)
        {
             ApiResponse<Subscription> localVarResponse = await ReactivateSubscriptionAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reactivate subscription on hold 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> ReactivateSubscriptionAsyncWithHttpInfo (string handle, ReactivateSubscription body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->ReactivateSubscription");

            var localVarPath = "/v1/subscription/{handle}/reactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReactivateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Redeem coupon code for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>CouponRedemption</returns>
        public CouponRedemption RedeemCouponCode (string handle, RedeemCouponCode body = null)
        {
             ApiResponse<CouponRedemption> localVarResponse = RedeemCouponCodeWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem coupon code for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CouponRedemption</returns>
        public ApiResponse< CouponRedemption > RedeemCouponCodeWithHttpInfo (string handle, RedeemCouponCode body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->RedeemCouponCode");

            var localVarPath = "/v1/subscription/{handle}/coupon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemCouponCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponRedemption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponRedemption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponRedemption)));
            
        }

        /// <summary>
        /// Redeem coupon code for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CouponRedemption</returns>
        public async System.Threading.Tasks.Task<CouponRedemption> RedeemCouponCodeAsync (string handle, RedeemCouponCode body = null)
        {
             ApiResponse<CouponRedemption> localVarResponse = await RedeemCouponCodeAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Redeem coupon code for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CouponRedemption)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponRedemption>> RedeemCouponCodeAsyncWithHttpInfo (string handle, RedeemCouponCode body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->RedeemCouponCode");

            var localVarPath = "/v1/subscription/{handle}/coupon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemCouponCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponRedemption>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CouponRedemption) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponRedemption)));
            
        }

        /// <summary>
        /// Remove all payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>PaymentMethods</returns>
        public PaymentMethods RemoveAllPaymentMethods (string handle)
        {
             ApiResponse<PaymentMethods> localVarResponse = RemoveAllPaymentMethodsWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove all payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        public ApiResponse< PaymentMethods > RemoveAllPaymentMethodsWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->RemoveAllPaymentMethods");

            var localVarPath = "/v1/subscription/{handle}/payment_method";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAllPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Remove all payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of PaymentMethods</returns>
        public async System.Threading.Tasks.Task<PaymentMethods> RemoveAllPaymentMethodsAsync (string handle)
        {
             ApiResponse<PaymentMethods> localVarResponse = await RemoveAllPaymentMethodsAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove all payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> RemoveAllPaymentMethodsAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->RemoveAllPaymentMethods");

            var localVarPath = "/v1/subscription/{handle}/payment_method";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAllPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Remove payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>PaymentMethods</returns>
        public PaymentMethods RemovePaymentMethod (string handle, string methodId)
        {
             ApiResponse<PaymentMethods> localVarResponse = RemovePaymentMethodWithHttpInfo(handle, methodId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        public ApiResponse< PaymentMethods > RemovePaymentMethodWithHttpInfo (string handle, string methodId)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->RemovePaymentMethod");
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling SubscriptionApi->RemovePaymentMethod");

            var localVarPath = "/v1/subscription/{handle}/payment_method/{method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (methodId != null) localVarPathParams.Add("method_id", Configuration.ApiClient.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Remove payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of PaymentMethods</returns>
        public async System.Threading.Tasks.Task<PaymentMethods> RemovePaymentMethodAsync (string handle, string methodId)
        {
             ApiResponse<PaymentMethods> localVarResponse = await RemovePaymentMethodAsyncWithHttpInfo(handle, methodId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> RemovePaymentMethodAsyncWithHttpInfo (string handle, string methodId)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->RemovePaymentMethod");
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling SubscriptionApi->RemovePaymentMethod");

            var localVarPath = "/v1/subscription/{handle}/payment_method/{method_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (methodId != null) localVarPathParams.Add("method_id", Configuration.ApiClient.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Set card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentMethods</returns>
        public PaymentMethods SetCardPaymentMethodJson (string handle, SetCardPaymentMethod body = null)
        {
             ApiResponse<PaymentMethods> localVarResponse = SetCardPaymentMethodJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        public ApiResponse< PaymentMethods > SetCardPaymentMethodJsonWithHttpInfo (string handle, SetCardPaymentMethod body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->SetCardPaymentMethodJson");

            var localVarPath = "/v1/subscription/{handle}/payment_method/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCardPaymentMethodJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Set card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PaymentMethods</returns>
        public async System.Threading.Tasks.Task<PaymentMethods> SetCardPaymentMethodJsonAsync (string handle, SetCardPaymentMethod body = null)
        {
             ApiResponse<PaymentMethods> localVarResponse = await SetCardPaymentMethodJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> SetCardPaymentMethodJsonAsyncWithHttpInfo (string handle, SetCardPaymentMethod body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->SetCardPaymentMethodJson");

            var localVarPath = "/v1/subscription/{handle}/payment_method/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCardPaymentMethodJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Uncancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Subscription</returns>
        public Subscription Uncancel (string handle)
        {
             ApiResponse<Subscription> localVarResponse = UncancelWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uncancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > UncancelWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->Uncancel");

            var localVarPath = "/v1/subscription/{handle}/uncancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uncancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

        /// <summary>
        /// Uncancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> UncancelAsync (string handle)
        {
             ApiResponse<Subscription> localVarResponse = await UncancelAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uncancel subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> UncancelAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling SubscriptionApi->Uncancel");

            var localVarPath = "/v1/subscription/{handle}/uncancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uncancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
            
        }

    }
}
