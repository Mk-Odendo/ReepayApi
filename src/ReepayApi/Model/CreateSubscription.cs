/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// CreateSubscription
    /// </summary>
    [DataContract]
    public partial class CreateSubscription :  IEquatable<CreateSubscription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscription" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSubscription" /> class.
        /// </summary>
        /// <param name="Customer">Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter &#x60;create_customer&#x60;..</param>
        /// <param name="Plan">Plan handle (required).</param>
        /// <param name="Amount">Optional custom per quantity plan price including VAT. If provided the plan price billed for each billing period will be overridden by this price..</param>
        /// <param name="Quantity">Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan..</param>
        /// <param name="Test">Test flag. If given it will be verified that the account state matches the intended create state. (default to false).</param>
        /// <param name="Handle">Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined..</param>
        /// <param name="Card">If signup method &#39;card&#39; is used a card id of an existing card must be provided.</param>
        /// <param name="SignupMethod">The signup method, how to get the payment information from customer, one of the following: &#x60;card&#x60;, &#x60;card_token&#x60;, &#x60;email&#x60;, &#x60;link&#x60; (required).</param>
        /// <param name="ConditionalCreate">If the subscription is eligable to bill for the first period right away, this option will make the creation conditional on a successfull payment of the first invoice. Will require a signup method of &#x60;card&#x60; or &#x60;card_token&#x60;. Default is false. (default to false).</param>
        /// <param name="CreateCustomer">Create customer and subscription in an atomic operation.</param>
        /// <param name="PlanVersion">Optional plan version, default is to use newest version of plan.</param>
        /// <param name="AmountInclVat">Whether the optional amount is including VAT. Defaults to true. (default to false).</param>
        /// <param name="GenerateHandle">Auto generate handle on the form sub-[sequence_number] (default to false).</param>
        /// <param name="StartDate">Date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time..</param>
        /// <param name="EndDate">Fixed date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date..</param>
        /// <param name="GraceDuration">A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method..</param>
        /// <param name="CardToken">If signup method &#39;card_token&#39; is used a card token must be provided.</param>
        /// <param name="NoTrial">Override plan trial settings and disable trial (default to false).</param>
        /// <param name="SubscriptionDiscounts">Discounts to attach to subscription.</param>
        /// <param name="CouponCodes">Coupon codes to redeem for subscription.</param>
        public CreateSubscription(string Customer = null, string Plan = null, int? Amount = null, int? Quantity = null, bool? Test = null, string Handle = null, string Card = null, string SignupMethod = null, bool? ConditionalCreate = null, CreateCustomer CreateCustomer = null, int? PlanVersion = null, bool? AmountInclVat = null, bool? GenerateHandle = null, string StartDate = null, string EndDate = null, long? GraceDuration = null, string CardToken = null, bool? NoTrial = null, List<CreateSubscriptionDiscount> SubscriptionDiscounts = null, List<string> CouponCodes = null)
        {
            // to ensure "Plan" is required (not null)
            if (Plan == null)
            {
                throw new InvalidDataException("Plan is a required property for CreateSubscription and cannot be null");
            }
            else
            {
                this.Plan = Plan;
            }
            // to ensure "SignupMethod" is required (not null)
            if (SignupMethod == null)
            {
                throw new InvalidDataException("SignupMethod is a required property for CreateSubscription and cannot be null");
            }
            else
            {
                this.SignupMethod = SignupMethod;
            }
            this.Customer = Customer;
            this.Amount = Amount;
            this.Quantity = Quantity;
            // use default value if no "Test" provided
            if (Test == null)
            {
                this.Test = false;
            }
            else
            {
                this.Test = Test;
            }
            this.Handle = Handle;
            this.Card = Card;
            // use default value if no "ConditionalCreate" provided
            if (ConditionalCreate == null)
            {
                this.ConditionalCreate = false;
            }
            else
            {
                this.ConditionalCreate = ConditionalCreate;
            }
            this.CreateCustomer = CreateCustomer;
            this.PlanVersion = PlanVersion;
            // use default value if no "AmountInclVat" provided
            if (AmountInclVat == null)
            {
                this.AmountInclVat = false;
            }
            else
            {
                this.AmountInclVat = AmountInclVat;
            }
            // use default value if no "GenerateHandle" provided
            if (GenerateHandle == null)
            {
                this.GenerateHandle = false;
            }
            else
            {
                this.GenerateHandle = GenerateHandle;
            }
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.GraceDuration = GraceDuration;
            this.CardToken = CardToken;
            // use default value if no "NoTrial" provided
            if (NoTrial == null)
            {
                this.NoTrial = false;
            }
            else
            {
                this.NoTrial = NoTrial;
            }
            this.SubscriptionDiscounts = SubscriptionDiscounts;
            this.CouponCodes = CouponCodes;
        }
        
        /// <summary>
        /// Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter &#x60;create_customer&#x60;.
        /// </summary>
        /// <value>Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter &#x60;create_customer&#x60;.</value>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public string Customer { get; set; }
        /// <summary>
        /// Plan handle
        /// </summary>
        /// <value>Plan handle</value>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public string Plan { get; set; }
        /// <summary>
        /// Optional custom per quantity plan price including VAT. If provided the plan price billed for each billing period will be overridden by this price.
        /// </summary>
        /// <value>Optional custom per quantity plan price including VAT. If provided the plan price billed for each billing period will be overridden by this price.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }
        /// <summary>
        /// Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.
        /// </summary>
        /// <value>Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Test flag. If given it will be verified that the account state matches the intended create state.
        /// </summary>
        /// <value>Test flag. If given it will be verified that the account state matches the intended create state.</value>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public bool? Test { get; set; }
        /// <summary>
        /// Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined.
        /// </summary>
        /// <value>Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined.</value>
        [DataMember(Name="handle", EmitDefaultValue=false)]
        public string Handle { get; set; }
        /// <summary>
        /// If signup method &#39;card&#39; is used a card id of an existing card must be provided
        /// </summary>
        /// <value>If signup method &#39;card&#39; is used a card id of an existing card must be provided</value>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public string Card { get; set; }
        /// <summary>
        /// The signup method, how to get the payment information from customer, one of the following: &#x60;card&#x60;, &#x60;card_token&#x60;, &#x60;email&#x60;, &#x60;link&#x60;
        /// </summary>
        /// <value>The signup method, how to get the payment information from customer, one of the following: &#x60;card&#x60;, &#x60;card_token&#x60;, &#x60;email&#x60;, &#x60;link&#x60;</value>
        [DataMember(Name="signup_method", EmitDefaultValue=false)]
        public string SignupMethod { get; set; }
        /// <summary>
        /// If the subscription is eligable to bill for the first period right away, this option will make the creation conditional on a successfull payment of the first invoice. Will require a signup method of &#x60;card&#x60; or &#x60;card_token&#x60;. Default is false.
        /// </summary>
        /// <value>If the subscription is eligable to bill for the first period right away, this option will make the creation conditional on a successfull payment of the first invoice. Will require a signup method of &#x60;card&#x60; or &#x60;card_token&#x60;. Default is false.</value>
        [DataMember(Name="conditional_create", EmitDefaultValue=false)]
        public bool? ConditionalCreate { get; set; }
        /// <summary>
        /// Create customer and subscription in an atomic operation
        /// </summary>
        /// <value>Create customer and subscription in an atomic operation</value>
        [DataMember(Name="create_customer", EmitDefaultValue=false)]
        public CreateCustomer CreateCustomer { get; set; }
        /// <summary>
        /// Optional plan version, default is to use newest version of plan
        /// </summary>
        /// <value>Optional plan version, default is to use newest version of plan</value>
        [DataMember(Name="plan_version", EmitDefaultValue=false)]
        public int? PlanVersion { get; set; }
        /// <summary>
        /// Whether the optional amount is including VAT. Defaults to true.
        /// </summary>
        /// <value>Whether the optional amount is including VAT. Defaults to true.</value>
        [DataMember(Name="amount_incl_vat", EmitDefaultValue=false)]
        public bool? AmountInclVat { get; set; }
        /// <summary>
        /// Auto generate handle on the form sub-[sequence_number]
        /// </summary>
        /// <value>Auto generate handle on the form sub-[sequence_number]</value>
        [DataMember(Name="generate_handle", EmitDefaultValue=false)]
        public bool? GenerateHandle { get; set; }
        /// <summary>
        /// Date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time.
        /// </summary>
        /// <value>Date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }
        /// <summary>
        /// Fixed date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date.
        /// </summary>
        /// <value>Fixed date and time on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }
        /// <summary>
        /// A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.
        /// </summary>
        /// <value>A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.</value>
        [DataMember(Name="grace_duration", EmitDefaultValue=false)]
        public long? GraceDuration { get; set; }
        /// <summary>
        /// If signup method &#39;card_token&#39; is used a card token must be provided
        /// </summary>
        /// <value>If signup method &#39;card_token&#39; is used a card token must be provided</value>
        [DataMember(Name="card_token", EmitDefaultValue=false)]
        public string CardToken { get; set; }
        /// <summary>
        /// Override plan trial settings and disable trial
        /// </summary>
        /// <value>Override plan trial settings and disable trial</value>
        [DataMember(Name="no_trial", EmitDefaultValue=false)]
        public bool? NoTrial { get; set; }
        /// <summary>
        /// Discounts to attach to subscription
        /// </summary>
        /// <value>Discounts to attach to subscription</value>
        [DataMember(Name="subscription_discounts", EmitDefaultValue=false)]
        public List<CreateSubscriptionDiscount> SubscriptionDiscounts { get; set; }
        /// <summary>
        /// Coupon codes to redeem for subscription
        /// </summary>
        /// <value>Coupon codes to redeem for subscription</value>
        [DataMember(Name="coupon_codes", EmitDefaultValue=false)]
        public List<string> CouponCodes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSubscription {\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  SignupMethod: ").Append(SignupMethod).Append("\n");
            sb.Append("  ConditionalCreate: ").Append(ConditionalCreate).Append("\n");
            sb.Append("  CreateCustomer: ").Append(CreateCustomer).Append("\n");
            sb.Append("  PlanVersion: ").Append(PlanVersion).Append("\n");
            sb.Append("  AmountInclVat: ").Append(AmountInclVat).Append("\n");
            sb.Append("  GenerateHandle: ").Append(GenerateHandle).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  GraceDuration: ").Append(GraceDuration).Append("\n");
            sb.Append("  CardToken: ").Append(CardToken).Append("\n");
            sb.Append("  NoTrial: ").Append(NoTrial).Append("\n");
            sb.Append("  SubscriptionDiscounts: ").Append(SubscriptionDiscounts).Append("\n");
            sb.Append("  CouponCodes: ").Append(CouponCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateSubscription);
        }

        /// <summary>
        /// Returns true if CreateSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSubscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Plan == other.Plan ||
                    this.Plan != null &&
                    this.Plan.Equals(other.Plan)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Test == other.Test ||
                    this.Test != null &&
                    this.Test.Equals(other.Test)
                ) && 
                (
                    this.Handle == other.Handle ||
                    this.Handle != null &&
                    this.Handle.Equals(other.Handle)
                ) && 
                (
                    this.Card == other.Card ||
                    this.Card != null &&
                    this.Card.Equals(other.Card)
                ) && 
                (
                    this.SignupMethod == other.SignupMethod ||
                    this.SignupMethod != null &&
                    this.SignupMethod.Equals(other.SignupMethod)
                ) && 
                (
                    this.ConditionalCreate == other.ConditionalCreate ||
                    this.ConditionalCreate != null &&
                    this.ConditionalCreate.Equals(other.ConditionalCreate)
                ) && 
                (
                    this.CreateCustomer == other.CreateCustomer ||
                    this.CreateCustomer != null &&
                    this.CreateCustomer.Equals(other.CreateCustomer)
                ) && 
                (
                    this.PlanVersion == other.PlanVersion ||
                    this.PlanVersion != null &&
                    this.PlanVersion.Equals(other.PlanVersion)
                ) && 
                (
                    this.AmountInclVat == other.AmountInclVat ||
                    this.AmountInclVat != null &&
                    this.AmountInclVat.Equals(other.AmountInclVat)
                ) && 
                (
                    this.GenerateHandle == other.GenerateHandle ||
                    this.GenerateHandle != null &&
                    this.GenerateHandle.Equals(other.GenerateHandle)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.GraceDuration == other.GraceDuration ||
                    this.GraceDuration != null &&
                    this.GraceDuration.Equals(other.GraceDuration)
                ) && 
                (
                    this.CardToken == other.CardToken ||
                    this.CardToken != null &&
                    this.CardToken.Equals(other.CardToken)
                ) && 
                (
                    this.NoTrial == other.NoTrial ||
                    this.NoTrial != null &&
                    this.NoTrial.Equals(other.NoTrial)
                ) && 
                (
                    this.SubscriptionDiscounts == other.SubscriptionDiscounts ||
                    this.SubscriptionDiscounts != null &&
                    this.SubscriptionDiscounts.SequenceEqual(other.SubscriptionDiscounts)
                ) && 
                (
                    this.CouponCodes == other.CouponCodes ||
                    this.CouponCodes != null &&
                    this.CouponCodes.SequenceEqual(other.CouponCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.Plan != null)
                    hash = hash * 59 + this.Plan.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Test != null)
                    hash = hash * 59 + this.Test.GetHashCode();
                if (this.Handle != null)
                    hash = hash * 59 + this.Handle.GetHashCode();
                if (this.Card != null)
                    hash = hash * 59 + this.Card.GetHashCode();
                if (this.SignupMethod != null)
                    hash = hash * 59 + this.SignupMethod.GetHashCode();
                if (this.ConditionalCreate != null)
                    hash = hash * 59 + this.ConditionalCreate.GetHashCode();
                if (this.CreateCustomer != null)
                    hash = hash * 59 + this.CreateCustomer.GetHashCode();
                if (this.PlanVersion != null)
                    hash = hash * 59 + this.PlanVersion.GetHashCode();
                if (this.AmountInclVat != null)
                    hash = hash * 59 + this.AmountInclVat.GetHashCode();
                if (this.GenerateHandle != null)
                    hash = hash * 59 + this.GenerateHandle.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.GraceDuration != null)
                    hash = hash * 59 + this.GraceDuration.GetHashCode();
                if (this.CardToken != null)
                    hash = hash * 59 + this.CardToken.GetHashCode();
                if (this.NoTrial != null)
                    hash = hash * 59 + this.NoTrial.GetHashCode();
                if (this.SubscriptionDiscounts != null)
                    hash = hash * 59 + this.SubscriptionDiscounts.GetHashCode();
                if (this.CouponCodes != null)
                    hash = hash * 59 + this.CouponCodes.GetHashCode();
                return hash;
            }
        }
    }

}
