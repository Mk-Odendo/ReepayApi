/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// ReactivateSubscription
    /// </summary>
    [DataContract]
    public partial class ReactivateSubscription :  IEquatable<ReactivateSubscription>
    {
        /// <summary>
        /// Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
        /// </summary>
        /// <value>Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PartialPeriodHandlingEnum
        {
            
            /// <summary>
            /// Enum Billfull for "bill_full"
            /// </summary>
            [EnumMember(Value = "bill_full")]
            Billfull,
            
            /// <summary>
            /// Enum Billprorated for "bill_prorated"
            /// </summary>
            [EnumMember(Value = "bill_prorated")]
            Billprorated,
            
            /// <summary>
            /// Enum Billzeroamount for "bill_zero_amount"
            /// </summary>
            [EnumMember(Value = "bill_zero_amount")]
            Billzeroamount,
            
            /// <summary>
            /// Enum Nobill for "no_bill"
            /// </summary>
            [EnumMember(Value = "no_bill")]
            Nobill
        }

        /// <summary>
        /// Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
        /// </summary>
        /// <value>Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.</value>
        [DataMember(Name="partial_period_handling", EmitDefaultValue=false)]
        public PartialPeriodHandlingEnum? PartialPeriodHandling { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReactivateSubscription" /> class.
        /// </summary>
        /// <param name="StartDate">Optional date and time from which the subscription is eligible to schedule first invoice after reactivation. If no time part is given start of day will be used. A start date in the past can be used, but not before the date when the subscription was put on hold. A start date in the past can result in invoices for past billing periods. Default value is current date and time. On the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;.</param>
        /// <param name="PartialPeriodHandling">Optional argument to override plan setting on how to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: &#x60;bill_full&#x60;, &#x60;bill_prorated&#x60;, &#x60;bill_zero_amount&#x60;, &#x60;no_bill&#x60;..</param>
        public ReactivateSubscription(string StartDate = null, PartialPeriodHandlingEnum? PartialPeriodHandling = null)
        {
            this.StartDate = StartDate;
            this.PartialPeriodHandling = PartialPeriodHandling;
        }
        
        /// <summary>
        /// Optional date and time from which the subscription is eligible to schedule first invoice after reactivation. If no time part is given start of day will be used. A start date in the past can be used, but not before the date when the subscription was put on hold. A start date in the past can result in invoices for past billing periods. Default value is current date and time. On the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;
        /// </summary>
        /// <value>Optional date and time from which the subscription is eligible to schedule first invoice after reactivation. If no time part is given start of day will be used. A start date in the past can be used, but not before the date when the subscription was put on hold. A start date in the past can result in invoices for past billing periods. Default value is current date and time. On the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReactivateSubscription {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  PartialPeriodHandling: ").Append(PartialPeriodHandling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReactivateSubscription);
        }

        /// <summary>
        /// Returns true if ReactivateSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of ReactivateSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReactivateSubscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.PartialPeriodHandling == other.PartialPeriodHandling ||
                    this.PartialPeriodHandling != null &&
                    this.PartialPeriodHandling.Equals(other.PartialPeriodHandling)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.PartialPeriodHandling != null)
                    hash = hash * 59 + this.PartialPeriodHandling.GetHashCode();
                return hash;
            }
        }
    }

}
