/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// ManualTransaction
    /// </summary>
    [DataContract]
    public partial class ManualTransaction :  IEquatable<ManualTransaction>
    {
        /// <summary>
        /// State of the transaction, one of the following: `pending`, `processing`, `settled`, `refunded`, `failed`, `cancelled`
        /// </summary>
        /// <value>State of the transaction, one of the following: `pending`, `processing`, `settled`, `refunded`, `failed`, `cancelled`</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Pending for "pending"
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending,
            
            /// <summary>
            /// Enum Processing for "processing"
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing,
            
            /// <summary>
            /// Enum Settled for "settled"
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled,
            
            /// <summary>
            /// Enum Refunded for "refunded"
            /// </summary>
            [EnumMember(Value = "refunded")]
            Refunded,
            
            /// <summary>
            /// Enum Failed for "failed"
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed,
            
            /// <summary>
            /// Enum Cancelled for "cancelled"
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled
        }

        /// <summary>
        /// Transaction type, one of the following: 'settle', 'refund'
        /// </summary>
        /// <value>Transaction type, one of the following: 'settle', 'refund'</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Settle for "settle"
            /// </summary>
            [EnumMember(Value = "settle")]
            Settle,
            
            /// <summary>
            /// Enum Refund for "refund"
            /// </summary>
            [EnumMember(Value = "refund")]
            Refund
        }

        /// <summary>
        /// The method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `chargeback`, `other`
        /// </summary>
        /// <value>The method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `chargeback`, `other`</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Cash for "cash"
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash,
            
            /// <summary>
            /// Enum Banktransfer for "bank_transfer"
            /// </summary>
            [EnumMember(Value = "bank_transfer")]
            Banktransfer,
            
            /// <summary>
            /// Enum Check for "check"
            /// </summary>
            [EnumMember(Value = "check")]
            Check,
            
            /// <summary>
            /// Enum Chargeback for "chargeback"
            /// </summary>
            [EnumMember(Value = "chargeback")]
            Chargeback,
            
            /// <summary>
            /// Enum Other for "other"
            /// </summary>
            [EnumMember(Value = "other")]
            Other
        }

        /// <summary>
        /// State of the transaction, one of the following: `pending`, `processing`, `settled`, `refunded`, `failed`, `cancelled`
        /// </summary>
        /// <value>State of the transaction, one of the following: `pending`, `processing`, `settled`, `refunded`, `failed`, `cancelled`</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Transaction type, one of the following: 'settle', 'refund'
        /// </summary>
        /// <value>Transaction type, one of the following: 'settle', 'refund'</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `chargeback`, `other`
        /// </summary>
        /// <value>The method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `chargeback`, `other`</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualTransaction" /> class.
        /// </summary>
        [JsonConstructor]
        protected ManualTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualTransaction" /> class.
        /// </summary>
        /// <param name="Settled">When the transaction was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format. (required).</param>
        /// <param name="Failed">When the transaction failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format. (required).</param>
        /// <param name="Refunded">When the transaction was refunded, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format. (required).</param>
        /// <param name="Method">The method used for the offline manual transaction, allowable values: &#x60;cash&#x60;, &#x60;bank_transfer&#x60;, &#x60;check&#x60;, &#x60;chargeback&#x60;, &#x60;other&#x60; (required).</param>
        /// <param name="Comment">Optional comment for manual transaction.</param>
        /// <param name="Reference">Optional reference for the manual transaction.</param>
        /// <param name="PaymentDate">When the manual transaction was performed on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60; (required).</param>
        public ManualTransaction(DateTime? Settled = null, DateTime? Failed = null, DateTime? Refunded = null, MethodEnum? Method = null, string Comment = null, string Reference = null, DateTime? PaymentDate = null)
        {
            // to ensure "Settled" is required (not null)
            if (Settled == null)
            {
                throw new InvalidDataException("Settled is a required property for ManualTransaction and cannot be null");
            }
            else
            {
                this.Settled = Settled;
            }
            // to ensure "Failed" is required (not null)
            if (Failed == null)
            {
                throw new InvalidDataException("Failed is a required property for ManualTransaction and cannot be null");
            }
            else
            {
                this.Failed = Failed;
            }
            // to ensure "Refunded" is required (not null)
            if (Refunded == null)
            {
                throw new InvalidDataException("Refunded is a required property for ManualTransaction and cannot be null");
            }
            else
            {
                this.Refunded = Refunded;
            }
            // to ensure "Method" is required (not null)
            if (Method == null)
            {
                throw new InvalidDataException("Method is a required property for ManualTransaction and cannot be null");
            }
            else
            {
                this.Method = Method;
            }
            // to ensure "PaymentDate" is required (not null)
            if (PaymentDate == null)
            {
                throw new InvalidDataException("PaymentDate is a required property for ManualTransaction and cannot be null");
            }
            else
            {
                this.PaymentDate = PaymentDate;
            }
            this.Comment = Comment;
            this.Reference = Reference;
        }
        
        /// <summary>
        /// Transaction id assigned by Reepay
        /// </summary>
        /// <value>Transaction id assigned by Reepay</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }
        /// <summary>
        /// Invoice id
        /// </summary>
        /// <value>Invoice id</value>
        [DataMember(Name="invoice", EmitDefaultValue=false)]
        public string Invoice { get; private set; }
        /// <summary>
        /// The transaction amount
        /// </summary>
        /// <value>The transaction amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; private set; }
        /// <summary>
        /// When the transaction was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>When the transaction was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="settled", EmitDefaultValue=false)]
        public DateTime? Settled { get; set; }
        /// <summary>
        /// When the transaction failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>When the transaction failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public DateTime? Failed { get; set; }
        /// <summary>
        /// When the transaction was refunded, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>When the transaction was refunded, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="refunded", EmitDefaultValue=false)]
        public DateTime? Refunded { get; set; }
        /// <summary>
        /// Date when the transaction was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the transaction was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }
        /// <summary>
        /// Optional comment for manual transaction
        /// </summary>
        /// <value>Optional comment for manual transaction</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// Optional reference for the manual transaction
        /// </summary>
        /// <value>Optional reference for the manual transaction</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }
        /// <summary>
        /// When the manual transaction was performed on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;
        /// </summary>
        /// <value>When the manual transaction was performed on the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;</value>
        [DataMember(Name="payment_date", EmitDefaultValue=false)]
        public DateTime? PaymentDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManualTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Invoice: ").Append(Invoice).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Settled: ").Append(Settled).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Refunded: ").Append(Refunded).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ManualTransaction);
        }

        /// <summary>
        /// Returns true if ManualTransaction instances are equal
        /// </summary>
        /// <param name="other">Instance of ManualTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualTransaction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Invoice == other.Invoice ||
                    this.Invoice != null &&
                    this.Invoice.Equals(other.Invoice)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Settled == other.Settled ||
                    this.Settled != null &&
                    this.Settled.Equals(other.Settled)
                ) && 
                (
                    this.Failed == other.Failed ||
                    this.Failed != null &&
                    this.Failed.Equals(other.Failed)
                ) && 
                (
                    this.Refunded == other.Refunded ||
                    this.Refunded != null &&
                    this.Refunded.Equals(other.Refunded)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Method == other.Method ||
                    this.Method != null &&
                    this.Method.Equals(other.Method)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                ) && 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                ) && 
                (
                    this.PaymentDate == other.PaymentDate ||
                    this.PaymentDate != null &&
                    this.PaymentDate.Equals(other.PaymentDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Invoice != null)
                    hash = hash * 59 + this.Invoice.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Settled != null)
                    hash = hash * 59 + this.Settled.GetHashCode();
                if (this.Failed != null)
                    hash = hash * 59 + this.Failed.GetHashCode();
                if (this.Refunded != null)
                    hash = hash * 59 + this.Refunded.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Method != null)
                    hash = hash * 59 + this.Method.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                if (this.PaymentDate != null)
                    hash = hash * 59 + this.PaymentDate.GetHashCode();
                return hash;
            }
        }
    }

}
