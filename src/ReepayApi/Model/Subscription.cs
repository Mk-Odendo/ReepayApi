/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract]
    public partial class Subscription :  IEquatable<Subscription>
    {
        /// <summary>
        /// State of the subscription, one of the following: `active`, `expired` or `on_hold`. Active subscriptions can be cancelled and will expire at the end of the current billing period, or later depending on optional notice and fixation periods, this can be checked using the `is_cancelled` parameter and `expires`.
        /// </summary>
        /// <value>State of the subscription, one of the following: `active`, `expired` or `on_hold`. Active subscriptions can be cancelled and will expire at the end of the current billing period, or later depending on optional notice and fixation periods, this can be checked using the `is_cancelled` parameter and `expires`.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Active for "active"
            /// </summary>
            [EnumMember(Value = "active")]
            Active,
            
            /// <summary>
            /// Enum Expired for "expired"
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired,
            
            /// <summary>
            /// Enum Onhold for "on_hold"
            /// </summary>
            [EnumMember(Value = "on_hold")]
            Onhold
        }

        /// <summary>
        /// Reason for expire. Can be `ondemand`, `cancelled`, `dunning` or `fixed` 
        /// </summary>
        /// <value>Reason for expire. Can be `ondemand`, `cancelled`, `dunning` or `fixed` </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExpireReasonEnum
        {
            
            /// <summary>
            /// Enum Dunning for "dunning"
            /// </summary>
            [EnumMember(Value = "dunning")]
            Dunning,
            
            /// <summary>
            /// Enum Cancelled for "cancelled"
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled,
            
            /// <summary>
            /// Enum Ondemand for "ondemand"
            /// </summary>
            [EnumMember(Value = "ondemand")]
            Ondemand,
            
            /// <summary>
            /// Enum Fixed for "fixed"
            /// </summary>
            [EnumMember(Value = "fixed")]
            Fixed
        }

        /// <summary>
        /// Reason for on hold. Can be `ondemand` or `dunning` 
        /// </summary>
        /// <value>Reason for on hold. Can be `ondemand` or `dunning` </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnHoldReasonEnum
        {
            
            /// <summary>
            /// Enum Dunning for "dunning"
            /// </summary>
            [EnumMember(Value = "dunning")]
            Dunning,
            
            /// <summary>
            /// Enum Ondemand for "ondemand"
            /// </summary>
            [EnumMember(Value = "ondemand")]
            Ondemand
        }

        /// <summary>
        /// State of the subscription, one of the following: `active`, `expired` or `on_hold`. Active subscriptions can be cancelled and will expire at the end of the current billing period, or later depending on optional notice and fixation periods, this can be checked using the `is_cancelled` parameter and `expires`.
        /// </summary>
        /// <value>State of the subscription, one of the following: `active`, `expired` or `on_hold`. Active subscriptions can be cancelled and will expire at the end of the current billing period, or later depending on optional notice and fixation periods, this can be checked using the `is_cancelled` parameter and `expires`.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Reason for expire. Can be `ondemand`, `cancelled`, `dunning` or `fixed` 
        /// </summary>
        /// <value>Reason for expire. Can be `ondemand`, `cancelled`, `dunning` or `fixed` </value>
        [DataMember(Name="expire_reason", EmitDefaultValue=false)]
        public ExpireReasonEnum? ExpireReason { get; set; }
        /// <summary>
        /// Reason for on hold. Can be `ondemand` or `dunning` 
        /// </summary>
        /// <value>Reason for on hold. Can be `ondemand` or `dunning` </value>
        [DataMember(Name="on_hold_reason", EmitDefaultValue=false)]
        public OnHoldReasonEnum? OnHoldReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        [JsonConstructor]
        protected Subscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="Plan">Subscription plan handle (required).</param>
        /// <param name="Quantity">Quantity of the plan product for this subscription. (required).</param>
        /// <param name="PlanVersion">Subscription plan version (required).</param>
        /// <param name="AmountInclVat">If optional custom plan price this paramtere tells whether the amount is including VAT (default to false).</param>
        /// <param name="ScheduledPlanChange">If set, a subscription plan change has been scheduled to follow the next renewal. The value is the subscription plan handle to update to..</param>
        /// <param name="HostedPageLinks">Links to hosted pages relating to subscription (required).</param>
        /// <param name="SubscriptionDiscounts">List of susbcription discounts handles attached to subscription.</param>
        public Subscription(string Plan = null, int? Quantity = null, int? PlanVersion = null, bool? AmountInclVat = null, string ScheduledPlanChange = null, SubscriptionLinks HostedPageLinks = null, List<string> SubscriptionDiscounts = null)
        {
            // to ensure "Plan" is required (not null)
            if (Plan == null)
            {
                throw new InvalidDataException("Plan is a required property for Subscription and cannot be null");
            }
            else
            {
                this.Plan = Plan;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for Subscription and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "PlanVersion" is required (not null)
            if (PlanVersion == null)
            {
                throw new InvalidDataException("PlanVersion is a required property for Subscription and cannot be null");
            }
            else
            {
                this.PlanVersion = PlanVersion;
            }
            // to ensure "HostedPageLinks" is required (not null)
            if (HostedPageLinks == null)
            {
                throw new InvalidDataException("HostedPageLinks is a required property for Subscription and cannot be null");
            }
            else
            {
                this.HostedPageLinks = HostedPageLinks;
            }
            // use default value if no "AmountInclVat" provided
            if (AmountInclVat == null)
            {
                this.AmountInclVat = false;
            }
            else
            {
                this.AmountInclVat = AmountInclVat;
            }
            this.ScheduledPlanChange = ScheduledPlanChange;
            this.SubscriptionDiscounts = SubscriptionDiscounts;
        }
        
        /// <summary>
        /// Per account unique handle for subscription
        /// </summary>
        /// <value>Per account unique handle for subscription</value>
        [DataMember(Name="handle", EmitDefaultValue=false)]
        public string Handle { get; private set; }
        /// <summary>
        /// Customer handle
        /// </summary>
        /// <value>Customer handle</value>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public string Customer { get; private set; }
        /// <summary>
        /// Subscription plan handle
        /// </summary>
        /// <value>Subscription plan handle</value>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public string Plan { get; set; }
        /// <summary>
        /// Test flag
        /// </summary>
        /// <value>Test flag</value>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public bool? Test { get; private set; }
        /// <summary>
        /// Optional custom plan price. If defined the plan price billed for each billing period will be overridden by this price.
        /// </summary>
        /// <value>Optional custom plan price. If defined the plan price billed for each billing period will be overridden by this price.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; private set; }
        /// <summary>
        /// Quantity of the plan product for this subscription.
        /// </summary>
        /// <value>Quantity of the plan product for this subscription.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Fixed date when the subscription will expire because of cancellation. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Fixed date when the subscription will expire because of cancellation. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public DateTime? Expires { get; private set; }
        /// <summary>
        /// Date when the subscription was reactivated from on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the subscription was reactivated from on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="reactivated", EmitDefaultValue=false)]
        public DateTime? Reactivated { get; private set; }
        /// <summary>
        /// Time zone for the subscription as standard time zone id. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
        /// </summary>
        /// <value>Time zone for the subscription as standard time zone id. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; private set; }
        /// <summary>
        /// Date when the subscription was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the subscription was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }
        /// <summary>
        /// If the subscription renews at current period end. Also true for subscriptions with manual scheduling.
        /// </summary>
        /// <value>If the subscription renews at current period end. Also true for subscriptions with manual scheduling.</value>
        [DataMember(Name="renewing", EmitDefaultValue=false)]
        public bool? Renewing { get; private set; }
        /// <summary>
        /// Subscription plan version
        /// </summary>
        /// <value>Subscription plan version</value>
        [DataMember(Name="plan_version", EmitDefaultValue=false)]
        public int? PlanVersion { get; set; }
        /// <summary>
        /// If optional custom plan price this paramtere tells whether the amount is including VAT
        /// </summary>
        /// <value>If optional custom plan price this paramtere tells whether the amount is including VAT</value>
        [DataMember(Name="amount_incl_vat", EmitDefaultValue=false)]
        public bool? AmountInclVat { get; set; }
        /// <summary>
        /// Date and time from which the subscription is eligiable to schedule invoices. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date and time from which the subscription is eligiable to schedule invoices. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; private set; }
        /// <summary>
        /// Fixed end date and time. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Fixed end date and time. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? EndDate { get; private set; }
        /// <summary>
        /// Grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.
        /// </summary>
        /// <value>Grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.</value>
        [DataMember(Name="grace_duration", EmitDefaultValue=false)]
        public long? GraceDuration { get; private set; }
        /// <summary>
        /// Start date and time for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Start date and time for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="current_period_start", EmitDefaultValue=false)]
        public DateTime? CurrentPeriodStart { get; private set; }
        /// <summary>
        /// Start date and time for the next billing period, and also end date and time for the current billing period. Is also the date and time for next invoice if the subscription is renewing. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Start date and time for the next billing period, and also end date and time for the current billing period. Is also the date and time for next invoice if the subscription is renewing. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="next_period_start", EmitDefaultValue=false)]
        public DateTime? NextPeriodStart { get; private set; }
        /// <summary>
        /// Start date and time for the first ever billing period. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Start date and time for the first ever billing period. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="first_period_start", EmitDefaultValue=false)]
        public DateTime? FirstPeriodStart { get; private set; }
        /// <summary>
        /// Start date and time for the previous billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Start date and time for the previous billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="last_period_start", EmitDefaultValue=false)]
        public DateTime? LastPeriodStart { get; private set; }
        /// <summary>
        /// Start date and time of free trial period. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>Start date and time of free trial period. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="trial_start", EmitDefaultValue=false)]
        public DateTime? TrialStart { get; private set; }
        /// <summary>
        /// End date and time of free trial period. In ISO-8601 extended offset date-time format.
        /// </summary>
        /// <value>End date and time of free trial period. In ISO-8601 extended offset date-time format.</value>
        [DataMember(Name="trial_end", EmitDefaultValue=false)]
        public DateTime? TrialEnd { get; private set; }
        /// <summary>
        /// Whether the subscription has been cancelled. Cancelled subscriptions will expire at the end of the current billing period.
        /// </summary>
        /// <value>Whether the subscription has been cancelled. Cancelled subscriptions will expire at the end of the current billing period.</value>
        [DataMember(Name="is_cancelled", EmitDefaultValue=false)]
        public bool? IsCancelled { get; private set; }
        /// <summary>
        /// Whether the susbcription is in its trial period. If subscription has not started (has_started), trial_start and trial_end can be used to determine if the subscription will have a trial period.
        /// </summary>
        /// <value>Whether the susbcription is in its trial period. If subscription has not started (has_started), trial_start and trial_end can be used to determine if the subscription will have a trial period.</value>
        [DataMember(Name="in_trial", EmitDefaultValue=false)]
        public bool? InTrial { get; private set; }
        /// <summary>
        /// If subscription has a later start date, this parameter tells if the subscription has started. Use this in connection with state to determine if a subscription is active.
        /// </summary>
        /// <value>If subscription has a later start date, this parameter tells if the subscription has started. Use this in connection with state to determine if a subscription is active.</value>
        [DataMember(Name="has_started", EmitDefaultValue=false)]
        public bool? HasStarted { get; private set; }
        /// <summary>
        /// Number of renewals for the subscription (number of invoices)
        /// </summary>
        /// <value>Number of renewals for the subscription (number of invoices)</value>
        [DataMember(Name="renewal_count", EmitDefaultValue=false)]
        public int? RenewalCount { get; private set; }
        /// <summary>
        /// Date when the subscription was cancelled. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the subscription was cancelled. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="cancelled_date", EmitDefaultValue=false)]
        public DateTime? CancelledDate { get; private set; }
        /// <summary>
        /// Date when the subscription expired. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the subscription expired. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="expired_date", EmitDefaultValue=false)]
        public DateTime? ExpiredDate { get; private set; }
        /// <summary>
        /// Date when the subscription was put on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the subscription was put on hold. [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="on_hold_date", EmitDefaultValue=false)]
        public DateTime? OnHoldDate { get; private set; }
        /// <summary>
        /// Whether the customer at some point has added payment information to the subscription
        /// </summary>
        /// <value>Whether the customer at some point has added payment information to the subscription</value>
        [DataMember(Name="payment_method_added", EmitDefaultValue=false)]
        public bool? PaymentMethodAdded { get; private set; }
        /// <summary>
        /// If set, a subscription plan change has been scheduled to follow the next renewal. The value is the subscription plan handle to update to.
        /// </summary>
        /// <value>If set, a subscription plan change has been scheduled to follow the next renewal. The value is the subscription plan handle to update to.</value>
        [DataMember(Name="scheduled_plan_change", EmitDefaultValue=false)]
        public string ScheduledPlanChange { get; set; }
        /// <summary>
        /// If defined the date a reminder email was sent for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>If defined the date a reminder email was sent for the current billing period. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="reminder_email_sent", EmitDefaultValue=false)]
        public DateTime? ReminderEmailSent { get; private set; }
        /// <summary>
        /// Number of failed invoices for this subscription
        /// </summary>
        /// <value>Number of failed invoices for this subscription</value>
        [DataMember(Name="failed_invoices", EmitDefaultValue=false)]
        public int? FailedInvoices { get; private set; }
        /// <summary>
        /// Summed amount for failed invoices
        /// </summary>
        /// <value>Summed amount for failed invoices</value>
        [DataMember(Name="failed_amount", EmitDefaultValue=false)]
        public int? FailedAmount { get; private set; }
        /// <summary>
        /// Number of cancelled invoices for this subscription
        /// </summary>
        /// <value>Number of cancelled invoices for this subscription</value>
        [DataMember(Name="cancelled_invoices", EmitDefaultValue=false)]
        public int? CancelledInvoices { get; private set; }
        /// <summary>
        /// Summed amount for cancelled invoices
        /// </summary>
        /// <value>Summed amount for cancelled invoices</value>
        [DataMember(Name="cancelled_amount", EmitDefaultValue=false)]
        public int? CancelledAmount { get; private set; }
        /// <summary>
        /// Number of pending invoices for this subscription
        /// </summary>
        /// <value>Number of pending invoices for this subscription</value>
        [DataMember(Name="pending_invoices", EmitDefaultValue=false)]
        public int? PendingInvoices { get; private set; }
        /// <summary>
        /// Summed amount for pending invoices
        /// </summary>
        /// <value>Summed amount for pending invoices</value>
        [DataMember(Name="pending_amount", EmitDefaultValue=false)]
        public int? PendingAmount { get; private set; }
        /// <summary>
        /// Number of dunning invoices for this subscription
        /// </summary>
        /// <value>Number of dunning invoices for this subscription</value>
        [DataMember(Name="dunning_invoices", EmitDefaultValue=false)]
        public int? DunningInvoices { get; private set; }
        /// <summary>
        /// Summed amount for dunning invoices
        /// </summary>
        /// <value>Summed amount for dunning invoices</value>
        [DataMember(Name="dunning_amount", EmitDefaultValue=false)]
        public int? DunningAmount { get; private set; }
        /// <summary>
        /// Number of settled invoices for this subscription
        /// </summary>
        /// <value>Number of settled invoices for this subscription</value>
        [DataMember(Name="settled_invoices", EmitDefaultValue=false)]
        public int? SettledInvoices { get; private set; }
        /// <summary>
        /// Summed settled amount
        /// </summary>
        /// <value>Summed settled amount</value>
        [DataMember(Name="settled_amount", EmitDefaultValue=false)]
        public int? SettledAmount { get; private set; }
        /// <summary>
        /// Summed refunded amount
        /// </summary>
        /// <value>Summed refunded amount</value>
        [DataMember(Name="refunded_amount", EmitDefaultValue=false)]
        public int? RefundedAmount { get; private set; }
        /// <summary>
        /// Number of pending additional costs
        /// </summary>
        /// <value>Number of pending additional costs</value>
        [DataMember(Name="pending_additional_costs", EmitDefaultValue=false)]
        public int? PendingAdditionalCosts { get; private set; }
        /// <summary>
        /// Summed amount of pending additional costs incl vat
        /// </summary>
        /// <value>Summed amount of pending additional costs incl vat</value>
        [DataMember(Name="pending_additional_cost_amount", EmitDefaultValue=false)]
        public int? PendingAdditionalCostAmount { get; private set; }
        /// <summary>
        /// Number of additional costs that have been applied to invoices
        /// </summary>
        /// <value>Number of additional costs that have been applied to invoices</value>
        [DataMember(Name="transferred_additional_costs", EmitDefaultValue=false)]
        public int? TransferredAdditionalCosts { get; private set; }
        /// <summary>
        /// Summed amount of additional costs that have been applied to invoices
        /// </summary>
        /// <value>Summed amount of additional costs that have been applied to invoices</value>
        [DataMember(Name="transferred_additional_cost_amount", EmitDefaultValue=false)]
        public int? TransferredAdditionalCostAmount { get; private set; }
        /// <summary>
        /// Number of credits that have not fully been applied to invoices
        /// </summary>
        /// <value>Number of credits that have not fully been applied to invoices</value>
        [DataMember(Name="pending_credits", EmitDefaultValue=false)]
        public int? PendingCredits { get; private set; }
        /// <summary>
        /// Summed credit amount not yet applied to invoices
        /// </summary>
        /// <value>Summed credit amount not yet applied to invoices</value>
        [DataMember(Name="pending_credit_amount", EmitDefaultValue=false)]
        public int? PendingCreditAmount { get; private set; }
        /// <summary>
        /// Number of credits that have fully been applied to invoices
        /// </summary>
        /// <value>Number of credits that have fully been applied to invoices</value>
        [DataMember(Name="transferred_credits", EmitDefaultValue=false)]
        public int? TransferredCredits { get; private set; }
        /// <summary>
        /// Summed credit amount that have been applied to invoices
        /// </summary>
        /// <value>Summed credit amount that have been applied to invoices</value>
        [DataMember(Name="transferred_credit_amount", EmitDefaultValue=false)]
        public int? TransferredCreditAmount { get; private set; }
        /// <summary>
        /// Links to hosted pages relating to subscription
        /// </summary>
        /// <value>Links to hosted pages relating to subscription</value>
        [DataMember(Name="hosted_page_links", EmitDefaultValue=false)]
        public SubscriptionLinks HostedPageLinks { get; set; }
        /// <summary>
        /// List of susbcription discounts handles attached to subscription
        /// </summary>
        /// <value>List of susbcription discounts handles attached to subscription</value>
        [DataMember(Name="subscription_discounts", EmitDefaultValue=false)]
        public List<string> SubscriptionDiscounts { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Reactivated: ").Append(Reactivated).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Renewing: ").Append(Renewing).Append("\n");
            sb.Append("  PlanVersion: ").Append(PlanVersion).Append("\n");
            sb.Append("  AmountInclVat: ").Append(AmountInclVat).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  GraceDuration: ").Append(GraceDuration).Append("\n");
            sb.Append("  CurrentPeriodStart: ").Append(CurrentPeriodStart).Append("\n");
            sb.Append("  NextPeriodStart: ").Append(NextPeriodStart).Append("\n");
            sb.Append("  FirstPeriodStart: ").Append(FirstPeriodStart).Append("\n");
            sb.Append("  LastPeriodStart: ").Append(LastPeriodStart).Append("\n");
            sb.Append("  TrialStart: ").Append(TrialStart).Append("\n");
            sb.Append("  TrialEnd: ").Append(TrialEnd).Append("\n");
            sb.Append("  IsCancelled: ").Append(IsCancelled).Append("\n");
            sb.Append("  InTrial: ").Append(InTrial).Append("\n");
            sb.Append("  HasStarted: ").Append(HasStarted).Append("\n");
            sb.Append("  RenewalCount: ").Append(RenewalCount).Append("\n");
            sb.Append("  CancelledDate: ").Append(CancelledDate).Append("\n");
            sb.Append("  ExpiredDate: ").Append(ExpiredDate).Append("\n");
            sb.Append("  ExpireReason: ").Append(ExpireReason).Append("\n");
            sb.Append("  OnHoldDate: ").Append(OnHoldDate).Append("\n");
            sb.Append("  OnHoldReason: ").Append(OnHoldReason).Append("\n");
            sb.Append("  PaymentMethodAdded: ").Append(PaymentMethodAdded).Append("\n");
            sb.Append("  ScheduledPlanChange: ").Append(ScheduledPlanChange).Append("\n");
            sb.Append("  ReminderEmailSent: ").Append(ReminderEmailSent).Append("\n");
            sb.Append("  FailedInvoices: ").Append(FailedInvoices).Append("\n");
            sb.Append("  FailedAmount: ").Append(FailedAmount).Append("\n");
            sb.Append("  CancelledInvoices: ").Append(CancelledInvoices).Append("\n");
            sb.Append("  CancelledAmount: ").Append(CancelledAmount).Append("\n");
            sb.Append("  PendingInvoices: ").Append(PendingInvoices).Append("\n");
            sb.Append("  PendingAmount: ").Append(PendingAmount).Append("\n");
            sb.Append("  DunningInvoices: ").Append(DunningInvoices).Append("\n");
            sb.Append("  DunningAmount: ").Append(DunningAmount).Append("\n");
            sb.Append("  SettledInvoices: ").Append(SettledInvoices).Append("\n");
            sb.Append("  SettledAmount: ").Append(SettledAmount).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  PendingAdditionalCosts: ").Append(PendingAdditionalCosts).Append("\n");
            sb.Append("  PendingAdditionalCostAmount: ").Append(PendingAdditionalCostAmount).Append("\n");
            sb.Append("  TransferredAdditionalCosts: ").Append(TransferredAdditionalCosts).Append("\n");
            sb.Append("  TransferredAdditionalCostAmount: ").Append(TransferredAdditionalCostAmount).Append("\n");
            sb.Append("  PendingCredits: ").Append(PendingCredits).Append("\n");
            sb.Append("  PendingCreditAmount: ").Append(PendingCreditAmount).Append("\n");
            sb.Append("  TransferredCredits: ").Append(TransferredCredits).Append("\n");
            sb.Append("  TransferredCreditAmount: ").Append(TransferredCreditAmount).Append("\n");
            sb.Append("  HostedPageLinks: ").Append(HostedPageLinks).Append("\n");
            sb.Append("  SubscriptionDiscounts: ").Append(SubscriptionDiscounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="other">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Handle == other.Handle ||
                    this.Handle != null &&
                    this.Handle.Equals(other.Handle)
                ) && 
                (
                    this.Customer == other.Customer ||
                    this.Customer != null &&
                    this.Customer.Equals(other.Customer)
                ) && 
                (
                    this.Plan == other.Plan ||
                    this.Plan != null &&
                    this.Plan.Equals(other.Plan)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Test == other.Test ||
                    this.Test != null &&
                    this.Test.Equals(other.Test)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Expires == other.Expires ||
                    this.Expires != null &&
                    this.Expires.Equals(other.Expires)
                ) && 
                (
                    this.Reactivated == other.Reactivated ||
                    this.Reactivated != null &&
                    this.Reactivated.Equals(other.Reactivated)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Renewing == other.Renewing ||
                    this.Renewing != null &&
                    this.Renewing.Equals(other.Renewing)
                ) && 
                (
                    this.PlanVersion == other.PlanVersion ||
                    this.PlanVersion != null &&
                    this.PlanVersion.Equals(other.PlanVersion)
                ) && 
                (
                    this.AmountInclVat == other.AmountInclVat ||
                    this.AmountInclVat != null &&
                    this.AmountInclVat.Equals(other.AmountInclVat)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.GraceDuration == other.GraceDuration ||
                    this.GraceDuration != null &&
                    this.GraceDuration.Equals(other.GraceDuration)
                ) && 
                (
                    this.CurrentPeriodStart == other.CurrentPeriodStart ||
                    this.CurrentPeriodStart != null &&
                    this.CurrentPeriodStart.Equals(other.CurrentPeriodStart)
                ) && 
                (
                    this.NextPeriodStart == other.NextPeriodStart ||
                    this.NextPeriodStart != null &&
                    this.NextPeriodStart.Equals(other.NextPeriodStart)
                ) && 
                (
                    this.FirstPeriodStart == other.FirstPeriodStart ||
                    this.FirstPeriodStart != null &&
                    this.FirstPeriodStart.Equals(other.FirstPeriodStart)
                ) && 
                (
                    this.LastPeriodStart == other.LastPeriodStart ||
                    this.LastPeriodStart != null &&
                    this.LastPeriodStart.Equals(other.LastPeriodStart)
                ) && 
                (
                    this.TrialStart == other.TrialStart ||
                    this.TrialStart != null &&
                    this.TrialStart.Equals(other.TrialStart)
                ) && 
                (
                    this.TrialEnd == other.TrialEnd ||
                    this.TrialEnd != null &&
                    this.TrialEnd.Equals(other.TrialEnd)
                ) && 
                (
                    this.IsCancelled == other.IsCancelled ||
                    this.IsCancelled != null &&
                    this.IsCancelled.Equals(other.IsCancelled)
                ) && 
                (
                    this.InTrial == other.InTrial ||
                    this.InTrial != null &&
                    this.InTrial.Equals(other.InTrial)
                ) && 
                (
                    this.HasStarted == other.HasStarted ||
                    this.HasStarted != null &&
                    this.HasStarted.Equals(other.HasStarted)
                ) && 
                (
                    this.RenewalCount == other.RenewalCount ||
                    this.RenewalCount != null &&
                    this.RenewalCount.Equals(other.RenewalCount)
                ) && 
                (
                    this.CancelledDate == other.CancelledDate ||
                    this.CancelledDate != null &&
                    this.CancelledDate.Equals(other.CancelledDate)
                ) && 
                (
                    this.ExpiredDate == other.ExpiredDate ||
                    this.ExpiredDate != null &&
                    this.ExpiredDate.Equals(other.ExpiredDate)
                ) && 
                (
                    this.ExpireReason == other.ExpireReason ||
                    this.ExpireReason != null &&
                    this.ExpireReason.Equals(other.ExpireReason)
                ) && 
                (
                    this.OnHoldDate == other.OnHoldDate ||
                    this.OnHoldDate != null &&
                    this.OnHoldDate.Equals(other.OnHoldDate)
                ) && 
                (
                    this.OnHoldReason == other.OnHoldReason ||
                    this.OnHoldReason != null &&
                    this.OnHoldReason.Equals(other.OnHoldReason)
                ) && 
                (
                    this.PaymentMethodAdded == other.PaymentMethodAdded ||
                    this.PaymentMethodAdded != null &&
                    this.PaymentMethodAdded.Equals(other.PaymentMethodAdded)
                ) && 
                (
                    this.ScheduledPlanChange == other.ScheduledPlanChange ||
                    this.ScheduledPlanChange != null &&
                    this.ScheduledPlanChange.Equals(other.ScheduledPlanChange)
                ) && 
                (
                    this.ReminderEmailSent == other.ReminderEmailSent ||
                    this.ReminderEmailSent != null &&
                    this.ReminderEmailSent.Equals(other.ReminderEmailSent)
                ) && 
                (
                    this.FailedInvoices == other.FailedInvoices ||
                    this.FailedInvoices != null &&
                    this.FailedInvoices.Equals(other.FailedInvoices)
                ) && 
                (
                    this.FailedAmount == other.FailedAmount ||
                    this.FailedAmount != null &&
                    this.FailedAmount.Equals(other.FailedAmount)
                ) && 
                (
                    this.CancelledInvoices == other.CancelledInvoices ||
                    this.CancelledInvoices != null &&
                    this.CancelledInvoices.Equals(other.CancelledInvoices)
                ) && 
                (
                    this.CancelledAmount == other.CancelledAmount ||
                    this.CancelledAmount != null &&
                    this.CancelledAmount.Equals(other.CancelledAmount)
                ) && 
                (
                    this.PendingInvoices == other.PendingInvoices ||
                    this.PendingInvoices != null &&
                    this.PendingInvoices.Equals(other.PendingInvoices)
                ) && 
                (
                    this.PendingAmount == other.PendingAmount ||
                    this.PendingAmount != null &&
                    this.PendingAmount.Equals(other.PendingAmount)
                ) && 
                (
                    this.DunningInvoices == other.DunningInvoices ||
                    this.DunningInvoices != null &&
                    this.DunningInvoices.Equals(other.DunningInvoices)
                ) && 
                (
                    this.DunningAmount == other.DunningAmount ||
                    this.DunningAmount != null &&
                    this.DunningAmount.Equals(other.DunningAmount)
                ) && 
                (
                    this.SettledInvoices == other.SettledInvoices ||
                    this.SettledInvoices != null &&
                    this.SettledInvoices.Equals(other.SettledInvoices)
                ) && 
                (
                    this.SettledAmount == other.SettledAmount ||
                    this.SettledAmount != null &&
                    this.SettledAmount.Equals(other.SettledAmount)
                ) && 
                (
                    this.RefundedAmount == other.RefundedAmount ||
                    this.RefundedAmount != null &&
                    this.RefundedAmount.Equals(other.RefundedAmount)
                ) && 
                (
                    this.PendingAdditionalCosts == other.PendingAdditionalCosts ||
                    this.PendingAdditionalCosts != null &&
                    this.PendingAdditionalCosts.Equals(other.PendingAdditionalCosts)
                ) && 
                (
                    this.PendingAdditionalCostAmount == other.PendingAdditionalCostAmount ||
                    this.PendingAdditionalCostAmount != null &&
                    this.PendingAdditionalCostAmount.Equals(other.PendingAdditionalCostAmount)
                ) && 
                (
                    this.TransferredAdditionalCosts == other.TransferredAdditionalCosts ||
                    this.TransferredAdditionalCosts != null &&
                    this.TransferredAdditionalCosts.Equals(other.TransferredAdditionalCosts)
                ) && 
                (
                    this.TransferredAdditionalCostAmount == other.TransferredAdditionalCostAmount ||
                    this.TransferredAdditionalCostAmount != null &&
                    this.TransferredAdditionalCostAmount.Equals(other.TransferredAdditionalCostAmount)
                ) && 
                (
                    this.PendingCredits == other.PendingCredits ||
                    this.PendingCredits != null &&
                    this.PendingCredits.Equals(other.PendingCredits)
                ) && 
                (
                    this.PendingCreditAmount == other.PendingCreditAmount ||
                    this.PendingCreditAmount != null &&
                    this.PendingCreditAmount.Equals(other.PendingCreditAmount)
                ) && 
                (
                    this.TransferredCredits == other.TransferredCredits ||
                    this.TransferredCredits != null &&
                    this.TransferredCredits.Equals(other.TransferredCredits)
                ) && 
                (
                    this.TransferredCreditAmount == other.TransferredCreditAmount ||
                    this.TransferredCreditAmount != null &&
                    this.TransferredCreditAmount.Equals(other.TransferredCreditAmount)
                ) && 
                (
                    this.HostedPageLinks == other.HostedPageLinks ||
                    this.HostedPageLinks != null &&
                    this.HostedPageLinks.Equals(other.HostedPageLinks)
                ) && 
                (
                    this.SubscriptionDiscounts == other.SubscriptionDiscounts ||
                    this.SubscriptionDiscounts != null &&
                    this.SubscriptionDiscounts.SequenceEqual(other.SubscriptionDiscounts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Handle != null)
                    hash = hash * 59 + this.Handle.GetHashCode();
                if (this.Customer != null)
                    hash = hash * 59 + this.Customer.GetHashCode();
                if (this.Plan != null)
                    hash = hash * 59 + this.Plan.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Test != null)
                    hash = hash * 59 + this.Test.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Expires != null)
                    hash = hash * 59 + this.Expires.GetHashCode();
                if (this.Reactivated != null)
                    hash = hash * 59 + this.Reactivated.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Renewing != null)
                    hash = hash * 59 + this.Renewing.GetHashCode();
                if (this.PlanVersion != null)
                    hash = hash * 59 + this.PlanVersion.GetHashCode();
                if (this.AmountInclVat != null)
                    hash = hash * 59 + this.AmountInclVat.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.GraceDuration != null)
                    hash = hash * 59 + this.GraceDuration.GetHashCode();
                if (this.CurrentPeriodStart != null)
                    hash = hash * 59 + this.CurrentPeriodStart.GetHashCode();
                if (this.NextPeriodStart != null)
                    hash = hash * 59 + this.NextPeriodStart.GetHashCode();
                if (this.FirstPeriodStart != null)
                    hash = hash * 59 + this.FirstPeriodStart.GetHashCode();
                if (this.LastPeriodStart != null)
                    hash = hash * 59 + this.LastPeriodStart.GetHashCode();
                if (this.TrialStart != null)
                    hash = hash * 59 + this.TrialStart.GetHashCode();
                if (this.TrialEnd != null)
                    hash = hash * 59 + this.TrialEnd.GetHashCode();
                if (this.IsCancelled != null)
                    hash = hash * 59 + this.IsCancelled.GetHashCode();
                if (this.InTrial != null)
                    hash = hash * 59 + this.InTrial.GetHashCode();
                if (this.HasStarted != null)
                    hash = hash * 59 + this.HasStarted.GetHashCode();
                if (this.RenewalCount != null)
                    hash = hash * 59 + this.RenewalCount.GetHashCode();
                if (this.CancelledDate != null)
                    hash = hash * 59 + this.CancelledDate.GetHashCode();
                if (this.ExpiredDate != null)
                    hash = hash * 59 + this.ExpiredDate.GetHashCode();
                if (this.ExpireReason != null)
                    hash = hash * 59 + this.ExpireReason.GetHashCode();
                if (this.OnHoldDate != null)
                    hash = hash * 59 + this.OnHoldDate.GetHashCode();
                if (this.OnHoldReason != null)
                    hash = hash * 59 + this.OnHoldReason.GetHashCode();
                if (this.PaymentMethodAdded != null)
                    hash = hash * 59 + this.PaymentMethodAdded.GetHashCode();
                if (this.ScheduledPlanChange != null)
                    hash = hash * 59 + this.ScheduledPlanChange.GetHashCode();
                if (this.ReminderEmailSent != null)
                    hash = hash * 59 + this.ReminderEmailSent.GetHashCode();
                if (this.FailedInvoices != null)
                    hash = hash * 59 + this.FailedInvoices.GetHashCode();
                if (this.FailedAmount != null)
                    hash = hash * 59 + this.FailedAmount.GetHashCode();
                if (this.CancelledInvoices != null)
                    hash = hash * 59 + this.CancelledInvoices.GetHashCode();
                if (this.CancelledAmount != null)
                    hash = hash * 59 + this.CancelledAmount.GetHashCode();
                if (this.PendingInvoices != null)
                    hash = hash * 59 + this.PendingInvoices.GetHashCode();
                if (this.PendingAmount != null)
                    hash = hash * 59 + this.PendingAmount.GetHashCode();
                if (this.DunningInvoices != null)
                    hash = hash * 59 + this.DunningInvoices.GetHashCode();
                if (this.DunningAmount != null)
                    hash = hash * 59 + this.DunningAmount.GetHashCode();
                if (this.SettledInvoices != null)
                    hash = hash * 59 + this.SettledInvoices.GetHashCode();
                if (this.SettledAmount != null)
                    hash = hash * 59 + this.SettledAmount.GetHashCode();
                if (this.RefundedAmount != null)
                    hash = hash * 59 + this.RefundedAmount.GetHashCode();
                if (this.PendingAdditionalCosts != null)
                    hash = hash * 59 + this.PendingAdditionalCosts.GetHashCode();
                if (this.PendingAdditionalCostAmount != null)
                    hash = hash * 59 + this.PendingAdditionalCostAmount.GetHashCode();
                if (this.TransferredAdditionalCosts != null)
                    hash = hash * 59 + this.TransferredAdditionalCosts.GetHashCode();
                if (this.TransferredAdditionalCostAmount != null)
                    hash = hash * 59 + this.TransferredAdditionalCostAmount.GetHashCode();
                if (this.PendingCredits != null)
                    hash = hash * 59 + this.PendingCredits.GetHashCode();
                if (this.PendingCreditAmount != null)
                    hash = hash * 59 + this.PendingCreditAmount.GetHashCode();
                if (this.TransferredCredits != null)
                    hash = hash * 59 + this.TransferredCredits.GetHashCode();
                if (this.TransferredCreditAmount != null)
                    hash = hash * 59 + this.TransferredCreditAmount.GetHashCode();
                if (this.HostedPageLinks != null)
                    hash = hash * 59 + this.HostedPageLinks.GetHashCode();
                if (this.SubscriptionDiscounts != null)
                    hash = hash * 59 + this.SubscriptionDiscounts.GetHashCode();
                return hash;
            }
        }
    }

}
