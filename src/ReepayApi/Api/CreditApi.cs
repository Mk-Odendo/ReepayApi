/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ReepayApi.Client;
using ReepayApi.Model;

namespace ReepayApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICreditApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Credit</returns>
        Credit CancelCredit (string handle);

        /// <summary>
        /// Cancel credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>ApiResponse of Credit</returns>
        ApiResponse<Credit> CancelCreditWithHttpInfo (string handle);
        /// <summary>
        /// Create credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Credit</returns>
        Credit CreateCreditJson (CreateCredit body = null);

        /// <summary>
        /// Create credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Credit</returns>
        ApiResponse<Credit> CreateCreditJsonWithHttpInfo (CreateCredit body = null);
        /// <summary>
        /// Get credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Credit</returns>
        Credit GetCredit (string handle);

        /// <summary>
        /// Get credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>ApiResponse of Credit</returns>
        ApiResponse<Credit> GetCreditWithHttpInfo (string handle);
        /// <summary>
        /// Get credits for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>List&lt;Credit&gt;</returns>
        List<Credit> GetCredits (string handle);

        /// <summary>
        /// Get credits for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of List&lt;Credit&gt;</returns>
        ApiResponse<List<Credit>> GetCreditsWithHttpInfo (string handle);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of Credit</returns>
        System.Threading.Tasks.Task<Credit> CancelCreditAsync (string handle);

        /// <summary>
        /// Cancel credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credit>> CancelCreditAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Create credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Credit</returns>
        System.Threading.Tasks.Task<Credit> CreateCreditJsonAsync (CreateCredit body = null);

        /// <summary>
        /// Create credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credit>> CreateCreditJsonAsyncWithHttpInfo (CreateCredit body = null);
        /// <summary>
        /// Get credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of Credit</returns>
        System.Threading.Tasks.Task<Credit> GetCreditAsync (string handle);

        /// <summary>
        /// Get credit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Credit>> GetCreditAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get credits for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of List&lt;Credit&gt;</returns>
        System.Threading.Tasks.Task<List<Credit>> GetCreditsAsync (string handle);

        /// <summary>
        /// Get credits for subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (List&lt;Credit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Credit>>> GetCreditsAsyncWithHttpInfo (string handle);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CreditApi : ICreditApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CreditApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CreditApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Credit</returns>
        public Credit CancelCredit (string handle)
        {
             ApiResponse<Credit> localVarResponse = CancelCreditWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>ApiResponse of Credit</returns>
        public ApiResponse< Credit > CancelCreditWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CreditApi->CancelCredit");

            var localVarPath = "/v1/credit/{handle}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credit)));
            
        }

        /// <summary>
        /// Cancel credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of Credit</returns>
        public async System.Threading.Tasks.Task<Credit> CancelCreditAsync (string handle)
        {
             ApiResponse<Credit> localVarResponse = await CancelCreditAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credit>> CancelCreditAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CreditApi->CancelCredit");

            var localVarPath = "/v1/credit/{handle}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credit)));
            
        }

        /// <summary>
        /// Create credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Credit</returns>
        public Credit CreateCreditJson (CreateCredit body = null)
        {
             ApiResponse<Credit> localVarResponse = CreateCreditJsonWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Credit</returns>
        public ApiResponse< Credit > CreateCreditJsonWithHttpInfo (CreateCredit body = null)
        {

            var localVarPath = "/v1/credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCreditJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credit)));
            
        }

        /// <summary>
        /// Create credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Credit</returns>
        public async System.Threading.Tasks.Task<Credit> CreateCreditJsonAsync (CreateCredit body = null)
        {
             ApiResponse<Credit> localVarResponse = await CreateCreditJsonAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credit>> CreateCreditJsonAsyncWithHttpInfo (CreateCredit body = null)
        {

            var localVarPath = "/v1/credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCreditJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credit)));
            
        }

        /// <summary>
        /// Get credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Credit</returns>
        public Credit GetCredit (string handle)
        {
             ApiResponse<Credit> localVarResponse = GetCreditWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>ApiResponse of Credit</returns>
        public ApiResponse< Credit > GetCreditWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CreditApi->GetCredit");

            var localVarPath = "/v1/credit/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credit)));
            
        }

        /// <summary>
        /// Get credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of Credit</returns>
        public async System.Threading.Tasks.Task<Credit> GetCreditAsync (string handle)
        {
             ApiResponse<Credit> localVarResponse = await GetCreditAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get credit 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Credit handle</param>
        /// <returns>Task of ApiResponse (Credit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Credit>> GetCreditAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CreditApi->GetCredit");

            var localVarPath = "/v1/credit/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Credit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Credit) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Credit)));
            
        }

        /// <summary>
        /// Get credits for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>List&lt;Credit&gt;</returns>
        public List<Credit> GetCredits (string handle)
        {
             ApiResponse<List<Credit>> localVarResponse = GetCreditsWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get credits for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>ApiResponse of List&lt;Credit&gt;</returns>
        public ApiResponse< List<Credit> > GetCreditsWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CreditApi->GetCredits");

            var localVarPath = "/v1/credit/subscription/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Credit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Credit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Credit>)));
            
        }

        /// <summary>
        /// Get credits for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of List&lt;Credit&gt;</returns>
        public async System.Threading.Tasks.Task<List<Credit>> GetCreditsAsync (string handle)
        {
             ApiResponse<List<Credit>> localVarResponse = await GetCreditsAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get credits for subscription 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <returns>Task of ApiResponse (List&lt;Credit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Credit>>> GetCreditsAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CreditApi->GetCredits");

            var localVarPath = "/v1/credit/subscription/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Credit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Credit>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Credit>)));
            
        }

    }
}
