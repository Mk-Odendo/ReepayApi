/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SubscriptionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubscriptionApiTests
    {
        private SubscriptionApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubscriptionApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubscriptionApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubscriptionApi
            //Assert.IsInstanceOfType(typeof(SubscriptionApi), instance, "instance is a SubscriptionApi");
        }

        
        /// <summary>
        /// Test CancelChangePlan
        /// </summary>
        [Test]
        public void CancelChangePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //var response = instance.CancelChangePlan(handle);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test CancelSubscription
        /// </summary>
        [Test]
        public void CancelSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //CancelSubscription body = null;
            //var response = instance.CancelSubscription(handle, body);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test ChangeNextPeriodStartJson
        /// </summary>
        [Test]
        public void ChangeNextPeriodStartJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //ChangeNextPeriodStart body = null;
            //var response = instance.ChangeNextPeriodStartJson(handle, body);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test ChangePlanJson
        /// </summary>
        [Test]
        public void ChangePlanJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //ChangePlan body = null;
            //var response = instance.ChangePlanJson(handle, body);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test CreateSubscriptionDiscount
        /// </summary>
        [Test]
        public void CreateSubscriptionDiscountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //CreateSubscriptionDiscount body = null;
            //var response = instance.CreateSubscriptionDiscount(handle, body);
            //Assert.IsInstanceOf<SubscriptionDiscount> (response, "response is SubscriptionDiscount");
        }
        
        /// <summary>
        /// Test CreateSubscriptionInvoice
        /// </summary>
        [Test]
        public void CreateSubscriptionInvoiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //CreateSubscriptionInvoice body = null;
            //var response = instance.CreateSubscriptionInvoice(handle, body);
            //Assert.IsInstanceOf<Invoice> (response, "response is Invoice");
        }
        
        /// <summary>
        /// Test CreateSubscriptionJson
        /// </summary>
        [Test]
        public void CreateSubscriptionJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSubscription body = null;
            //var response = instance.CreateSubscriptionJson(body);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test DeleteSubscriptionDiscount
        /// </summary>
        [Test]
        public void DeleteSubscriptionDiscountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //string sdHandle = null;
            //var response = instance.DeleteSubscriptionDiscount(handle, sdHandle);
            //Assert.IsInstanceOf<SubscriptionDiscount> (response, "response is SubscriptionDiscount");
        }
        
        /// <summary>
        /// Test Expire
        /// </summary>
        [Test]
        public void ExpireTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //ExpireSubscription body = null;
            //var response = instance.Expire(handle, body);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test GetSubscription
        /// </summary>
        [Test]
        public void GetSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //var response = instance.GetSubscription(handle);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test GetSubscriptionDiscount
        /// </summary>
        [Test]
        public void GetSubscriptionDiscountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //string sdHandle = null;
            //var response = instance.GetSubscriptionDiscount(handle, sdHandle);
            //Assert.IsInstanceOf<SubscriptionDiscount> (response, "response is SubscriptionDiscount");
        }
        
        /// <summary>
        /// Test GetSubscriptionDiscounts
        /// </summary>
        [Test]
        public void GetSubscriptionDiscountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //var response = instance.GetSubscriptionDiscounts(handle);
            //Assert.IsInstanceOf<List<SubscriptionDiscount>> (response, "response is List<SubscriptionDiscount>");
        }
        
        /// <summary>
        /// Test GetSubscriptionPaymentMethods
        /// </summary>
        [Test]
        public void GetSubscriptionPaymentMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //var response = instance.GetSubscriptionPaymentMethods(handle);
            //Assert.IsInstanceOf<PaymentMethods> (response, "response is PaymentMethods");
        }
        
        /// <summary>
        /// Test GetSubscriptionPeriodBalance
        /// </summary>
        [Test]
        public void GetSubscriptionPeriodBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //string date = null;
            //var response = instance.GetSubscriptionPeriodBalance(handle, date);
            //Assert.IsInstanceOf<SubscriptionPeriodBalance> (response, "response is SubscriptionPeriodBalance");
        }
        
        /// <summary>
        /// Test GetSubscriptions
        /// </summary>
        [Test]
        public void GetSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //string search = null;
            //string sort = null;
            //var response = instance.GetSubscriptions(page, size, search, sort);
            //Assert.IsInstanceOf<SubscriptionSearch> (response, "response is SubscriptionSearch");
        }
        
        /// <summary>
        /// Test IntervalAmount
        /// </summary>
        [Test]
        public void IntervalAmountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //string from = null;
            //string to = null;
            //var response = instance.IntervalAmount(handle, from, to);
            //Assert.IsInstanceOf<IntervalAmount> (response, "response is IntervalAmount");
        }
        
        /// <summary>
        /// Test OnHold
        /// </summary>
        [Test]
        public void OnHoldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //OnHoldSubscription body = null;
            //var response = instance.OnHold(handle, body);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test ReactivateSubscription
        /// </summary>
        [Test]
        public void ReactivateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //ReactivateSubscription body = null;
            //var response = instance.ReactivateSubscription(handle, body);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
        /// <summary>
        /// Test RedeemCouponCode
        /// </summary>
        [Test]
        public void RedeemCouponCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //RedeemCouponCode body = null;
            //var response = instance.RedeemCouponCode(handle, body);
            //Assert.IsInstanceOf<CouponRedemption> (response, "response is CouponRedemption");
        }
        
        /// <summary>
        /// Test RemoveAllPaymentMethods
        /// </summary>
        [Test]
        public void RemoveAllPaymentMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //var response = instance.RemoveAllPaymentMethods(handle);
            //Assert.IsInstanceOf<PaymentMethods> (response, "response is PaymentMethods");
        }
        
        /// <summary>
        /// Test RemovePaymentMethod
        /// </summary>
        [Test]
        public void RemovePaymentMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //string methodId = null;
            //var response = instance.RemovePaymentMethod(handle, methodId);
            //Assert.IsInstanceOf<PaymentMethods> (response, "response is PaymentMethods");
        }
        
        /// <summary>
        /// Test SetCardPaymentMethodJson
        /// </summary>
        [Test]
        public void SetCardPaymentMethodJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //SetCardPaymentMethod body = null;
            //var response = instance.SetCardPaymentMethodJson(handle, body);
            //Assert.IsInstanceOf<PaymentMethods> (response, "response is PaymentMethods");
        }
        
        /// <summary>
        /// Test Uncancel
        /// </summary>
        [Test]
        public void UncancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string handle = null;
            //var response = instance.Uncancel(handle);
            //Assert.IsInstanceOf<Subscription> (response, "response is Subscription");
        }
        
    }

}
