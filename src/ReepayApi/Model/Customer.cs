/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract]
    public partial class Customer :  IEquatable<Customer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        [JsonConstructor]
        protected Customer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="Email">Customer email.</param>
        /// <param name="Address">Customer address.</param>
        /// <param name="Address2">Customer address2.</param>
        /// <param name="City">Customer city.</param>
        /// <param name="Country">Customer country in ISO 3166-1 alpha-2.</param>
        /// <param name="Phone">Customer phone number.</param>
        /// <param name="Company">Customer company.</param>
        /// <param name="Vat">Customer vat number.</param>
        /// <param name="Handle">Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. (required).</param>
        /// <param name="Test">Test flag (default to false).</param>
        /// <param name="FirstName">Customer first name.</param>
        /// <param name="LastName">Customer last name.</param>
        /// <param name="PostalCode">Customer postal code.</param>
        public Customer(string Email = null, string Address = null, string Address2 = null, string City = null, string Country = null, string Phone = null, string Company = null, string Vat = null, string Handle = null, bool? Test = null, string FirstName = null, string LastName = null, string PostalCode = null)
        {
            // to ensure "Handle" is required (not null)
            if (Handle == null)
            {
                throw new InvalidDataException("Handle is a required property for Customer and cannot be null");
            }
            else
            {
                this.Handle = Handle;
            }
            this.Email = Email;
            this.Address = Address;
            this.Address2 = Address2;
            this.City = City;
            this.Country = Country;
            this.Phone = Phone;
            this.Company = Company;
            this.Vat = Vat;
            // use default value if no "Test" provided
            if (Test == null)
            {
                this.Test = false;
            }
            else
            {
                this.Test = Test;
            }
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.PostalCode = PostalCode;
        }
        
        /// <summary>
        /// Customer email
        /// </summary>
        /// <value>Customer email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Customer address
        /// </summary>
        /// <value>Customer address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// Customer address2
        /// </summary>
        /// <value>Customer address2</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }
        /// <summary>
        /// Customer city
        /// </summary>
        /// <value>Customer city</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Customer country in ISO 3166-1 alpha-2
        /// </summary>
        /// <value>Customer country in ISO 3166-1 alpha-2</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Customer phone number
        /// </summary>
        /// <value>Customer phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Customer company
        /// </summary>
        /// <value>Customer company</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// Customer vat number
        /// </summary>
        /// <value>Customer vat number</value>
        [DataMember(Name="vat", EmitDefaultValue=false)]
        public string Vat { get; set; }
        /// <summary>
        /// Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
        /// </summary>
        /// <value>Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@].</value>
        [DataMember(Name="handle", EmitDefaultValue=false)]
        public string Handle { get; set; }
        /// <summary>
        /// Test flag
        /// </summary>
        /// <value>Test flag</value>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public bool? Test { get; set; }
        /// <summary>
        /// Number of active subscriptions for this customer (deprecated, will be removed in a later version, use active_subscriptions)
        /// </summary>
        /// <value>Number of active subscriptions for this customer (deprecated, will be removed in a later version, use active_subscriptions)</value>
        [DataMember(Name="subscriptions", EmitDefaultValue=false)]
        public int? Subscriptions { get; private set; }
        /// <summary>
        /// Date when the customer was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the customer was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }
        /// <summary>
        /// Date when the customer was deleted. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the customer was deleted. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public DateTime? Deleted { get; private set; }
        /// <summary>
        /// Customer first name
        /// </summary>
        /// <value>Customer first name</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Customer last name
        /// </summary>
        /// <value>Customer last name</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Customer postal code
        /// </summary>
        /// <value>Customer postal code</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// Number of active subscriptions for this customer
        /// </summary>
        /// <value>Number of active subscriptions for this customer</value>
        [DataMember(Name="active_subscriptions", EmitDefaultValue=false)]
        public int? ActiveSubscriptions { get; private set; }
        /// <summary>
        /// Number of active subscriptions in trial for this customer
        /// </summary>
        /// <value>Number of active subscriptions in trial for this customer</value>
        [DataMember(Name="trial_active_subscriptions", EmitDefaultValue=false)]
        public int? TrialActiveSubscriptions { get; private set; }
        /// <summary>
        /// Number of cancelled subscriptions in trial for this customer
        /// </summary>
        /// <value>Number of cancelled subscriptions in trial for this customer</value>
        [DataMember(Name="trial_cancelled_subscriptions", EmitDefaultValue=false)]
        public int? TrialCancelledSubscriptions { get; private set; }
        /// <summary>
        /// Number of expired subscription for this customer
        /// </summary>
        /// <value>Number of expired subscription for this customer</value>
        [DataMember(Name="expired_subscriptions", EmitDefaultValue=false)]
        public int? ExpiredSubscriptions { get; private set; }
        /// <summary>
        /// Number of subscription on hold for this customer
        /// </summary>
        /// <value>Number of subscription on hold for this customer</value>
        [DataMember(Name="on_hold_subscriptions", EmitDefaultValue=false)]
        public int? OnHoldSubscriptions { get; private set; }
        /// <summary>
        /// Number of cancelled subscription for this customer
        /// </summary>
        /// <value>Number of cancelled subscription for this customer</value>
        [DataMember(Name="cancelled_subscriptions", EmitDefaultValue=false)]
        public int? CancelledSubscriptions { get; private set; }
        /// <summary>
        /// Number of non renewing (active subscriptions not renewing at billing period end) subscriptions for this customer
        /// </summary>
        /// <value>Number of non renewing (active subscriptions not renewing at billing period end) subscriptions for this customer</value>
        [DataMember(Name="non_renewing_subscriptions", EmitDefaultValue=false)]
        public int? NonRenewingSubscriptions { get; private set; }
        /// <summary>
        /// Number of failed invoices for this customer
        /// </summary>
        /// <value>Number of failed invoices for this customer</value>
        [DataMember(Name="failed_invoices", EmitDefaultValue=false)]
        public int? FailedInvoices { get; private set; }
        /// <summary>
        /// Summed amount for failed invoices
        /// </summary>
        /// <value>Summed amount for failed invoices</value>
        [DataMember(Name="failed_amount", EmitDefaultValue=false)]
        public int? FailedAmount { get; private set; }
        /// <summary>
        /// Number of cancelled invoices for this customer
        /// </summary>
        /// <value>Number of cancelled invoices for this customer</value>
        [DataMember(Name="cancelled_invoices", EmitDefaultValue=false)]
        public int? CancelledInvoices { get; private set; }
        /// <summary>
        /// Summed amount for cancelled invoices
        /// </summary>
        /// <value>Summed amount for cancelled invoices</value>
        [DataMember(Name="cancelled_amount", EmitDefaultValue=false)]
        public int? CancelledAmount { get; private set; }
        /// <summary>
        /// Number of pending invoices for this customer
        /// </summary>
        /// <value>Number of pending invoices for this customer</value>
        [DataMember(Name="pending_invoices", EmitDefaultValue=false)]
        public int? PendingInvoices { get; private set; }
        /// <summary>
        /// Summed amount for pending invoices
        /// </summary>
        /// <value>Summed amount for pending invoices</value>
        [DataMember(Name="pending_amount", EmitDefaultValue=false)]
        public int? PendingAmount { get; private set; }
        /// <summary>
        /// Number of dunning invoices for this customer
        /// </summary>
        /// <value>Number of dunning invoices for this customer</value>
        [DataMember(Name="dunning_invoices", EmitDefaultValue=false)]
        public int? DunningInvoices { get; private set; }
        /// <summary>
        /// Summed amount for dunning invoices
        /// </summary>
        /// <value>Summed amount for dunning invoices</value>
        [DataMember(Name="dunning_amount", EmitDefaultValue=false)]
        public int? DunningAmount { get; private set; }
        /// <summary>
        /// Number of settled invoices for this customer
        /// </summary>
        /// <value>Number of settled invoices for this customer</value>
        [DataMember(Name="settled_invoices", EmitDefaultValue=false)]
        public int? SettledInvoices { get; private set; }
        /// <summary>
        /// Summed settled amount
        /// </summary>
        /// <value>Summed settled amount</value>
        [DataMember(Name="settled_amount", EmitDefaultValue=false)]
        public int? SettledAmount { get; private set; }
        /// <summary>
        /// Summed refunded amount
        /// </summary>
        /// <value>Summed refunded amount</value>
        [DataMember(Name="refunded_amount", EmitDefaultValue=false)]
        public int? RefundedAmount { get; private set; }
        /// <summary>
        /// Number of pending additional costs
        /// </summary>
        /// <value>Number of pending additional costs</value>
        [DataMember(Name="pending_additional_costs", EmitDefaultValue=false)]
        public int? PendingAdditionalCosts { get; private set; }
        /// <summary>
        /// Summed amount of pending additional costs incl vat
        /// </summary>
        /// <value>Summed amount of pending additional costs incl vat</value>
        [DataMember(Name="pending_additional_cost_amount", EmitDefaultValue=false)]
        public int? PendingAdditionalCostAmount { get; private set; }
        /// <summary>
        /// Number of additional costs that have been applied to invoices
        /// </summary>
        /// <value>Number of additional costs that have been applied to invoices</value>
        [DataMember(Name="transferred_additional_costs", EmitDefaultValue=false)]
        public int? TransferredAdditionalCosts { get; private set; }
        /// <summary>
        /// Summed amount of additional costs that have been applied to invoices
        /// </summary>
        /// <value>Summed amount of additional costs that have been applied to invoices</value>
        [DataMember(Name="transferred_additional_cost_amount", EmitDefaultValue=false)]
        public int? TransferredAdditionalCostAmount { get; private set; }
        /// <summary>
        /// Number of credits that have not fully been applied to invoices
        /// </summary>
        /// <value>Number of credits that have not fully been applied to invoices</value>
        [DataMember(Name="pending_credits", EmitDefaultValue=false)]
        public int? PendingCredits { get; private set; }
        /// <summary>
        /// Summed credit amount not yet applied to invoices
        /// </summary>
        /// <value>Summed credit amount not yet applied to invoices</value>
        [DataMember(Name="pending_credit_amount", EmitDefaultValue=false)]
        public int? PendingCreditAmount { get; private set; }
        /// <summary>
        /// Number of credits that have fully been applied to invoices
        /// </summary>
        /// <value>Number of credits that have fully been applied to invoices</value>
        [DataMember(Name="transferred_credits", EmitDefaultValue=false)]
        public int? TransferredCredits { get; private set; }
        /// <summary>
        /// Summed credit amount that have been applied to invoices
        /// </summary>
        /// <value>Summed credit amount that have been applied to invoices</value>
        [DataMember(Name="transferred_credit_amount", EmitDefaultValue=false)]
        public int? TransferredCreditAmount { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  ActiveSubscriptions: ").Append(ActiveSubscriptions).Append("\n");
            sb.Append("  TrialActiveSubscriptions: ").Append(TrialActiveSubscriptions).Append("\n");
            sb.Append("  TrialCancelledSubscriptions: ").Append(TrialCancelledSubscriptions).Append("\n");
            sb.Append("  ExpiredSubscriptions: ").Append(ExpiredSubscriptions).Append("\n");
            sb.Append("  OnHoldSubscriptions: ").Append(OnHoldSubscriptions).Append("\n");
            sb.Append("  CancelledSubscriptions: ").Append(CancelledSubscriptions).Append("\n");
            sb.Append("  NonRenewingSubscriptions: ").Append(NonRenewingSubscriptions).Append("\n");
            sb.Append("  FailedInvoices: ").Append(FailedInvoices).Append("\n");
            sb.Append("  FailedAmount: ").Append(FailedAmount).Append("\n");
            sb.Append("  CancelledInvoices: ").Append(CancelledInvoices).Append("\n");
            sb.Append("  CancelledAmount: ").Append(CancelledAmount).Append("\n");
            sb.Append("  PendingInvoices: ").Append(PendingInvoices).Append("\n");
            sb.Append("  PendingAmount: ").Append(PendingAmount).Append("\n");
            sb.Append("  DunningInvoices: ").Append(DunningInvoices).Append("\n");
            sb.Append("  DunningAmount: ").Append(DunningAmount).Append("\n");
            sb.Append("  SettledInvoices: ").Append(SettledInvoices).Append("\n");
            sb.Append("  SettledAmount: ").Append(SettledAmount).Append("\n");
            sb.Append("  RefundedAmount: ").Append(RefundedAmount).Append("\n");
            sb.Append("  PendingAdditionalCosts: ").Append(PendingAdditionalCosts).Append("\n");
            sb.Append("  PendingAdditionalCostAmount: ").Append(PendingAdditionalCostAmount).Append("\n");
            sb.Append("  TransferredAdditionalCosts: ").Append(TransferredAdditionalCosts).Append("\n");
            sb.Append("  TransferredAdditionalCostAmount: ").Append(TransferredAdditionalCostAmount).Append("\n");
            sb.Append("  PendingCredits: ").Append(PendingCredits).Append("\n");
            sb.Append("  PendingCreditAmount: ").Append(PendingCreditAmount).Append("\n");
            sb.Append("  TransferredCredits: ").Append(TransferredCredits).Append("\n");
            sb.Append("  TransferredCreditAmount: ").Append(TransferredCreditAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="other">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Address2 == other.Address2 ||
                    this.Address2 != null &&
                    this.Address2.Equals(other.Address2)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Vat == other.Vat ||
                    this.Vat != null &&
                    this.Vat.Equals(other.Vat)
                ) && 
                (
                    this.Handle == other.Handle ||
                    this.Handle != null &&
                    this.Handle.Equals(other.Handle)
                ) && 
                (
                    this.Test == other.Test ||
                    this.Test != null &&
                    this.Test.Equals(other.Test)
                ) && 
                (
                    this.Subscriptions == other.Subscriptions ||
                    this.Subscriptions != null &&
                    this.Subscriptions.Equals(other.Subscriptions)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Deleted == other.Deleted ||
                    this.Deleted != null &&
                    this.Deleted.Equals(other.Deleted)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.ActiveSubscriptions == other.ActiveSubscriptions ||
                    this.ActiveSubscriptions != null &&
                    this.ActiveSubscriptions.Equals(other.ActiveSubscriptions)
                ) && 
                (
                    this.TrialActiveSubscriptions == other.TrialActiveSubscriptions ||
                    this.TrialActiveSubscriptions != null &&
                    this.TrialActiveSubscriptions.Equals(other.TrialActiveSubscriptions)
                ) && 
                (
                    this.TrialCancelledSubscriptions == other.TrialCancelledSubscriptions ||
                    this.TrialCancelledSubscriptions != null &&
                    this.TrialCancelledSubscriptions.Equals(other.TrialCancelledSubscriptions)
                ) && 
                (
                    this.ExpiredSubscriptions == other.ExpiredSubscriptions ||
                    this.ExpiredSubscriptions != null &&
                    this.ExpiredSubscriptions.Equals(other.ExpiredSubscriptions)
                ) && 
                (
                    this.OnHoldSubscriptions == other.OnHoldSubscriptions ||
                    this.OnHoldSubscriptions != null &&
                    this.OnHoldSubscriptions.Equals(other.OnHoldSubscriptions)
                ) && 
                (
                    this.CancelledSubscriptions == other.CancelledSubscriptions ||
                    this.CancelledSubscriptions != null &&
                    this.CancelledSubscriptions.Equals(other.CancelledSubscriptions)
                ) && 
                (
                    this.NonRenewingSubscriptions == other.NonRenewingSubscriptions ||
                    this.NonRenewingSubscriptions != null &&
                    this.NonRenewingSubscriptions.Equals(other.NonRenewingSubscriptions)
                ) && 
                (
                    this.FailedInvoices == other.FailedInvoices ||
                    this.FailedInvoices != null &&
                    this.FailedInvoices.Equals(other.FailedInvoices)
                ) && 
                (
                    this.FailedAmount == other.FailedAmount ||
                    this.FailedAmount != null &&
                    this.FailedAmount.Equals(other.FailedAmount)
                ) && 
                (
                    this.CancelledInvoices == other.CancelledInvoices ||
                    this.CancelledInvoices != null &&
                    this.CancelledInvoices.Equals(other.CancelledInvoices)
                ) && 
                (
                    this.CancelledAmount == other.CancelledAmount ||
                    this.CancelledAmount != null &&
                    this.CancelledAmount.Equals(other.CancelledAmount)
                ) && 
                (
                    this.PendingInvoices == other.PendingInvoices ||
                    this.PendingInvoices != null &&
                    this.PendingInvoices.Equals(other.PendingInvoices)
                ) && 
                (
                    this.PendingAmount == other.PendingAmount ||
                    this.PendingAmount != null &&
                    this.PendingAmount.Equals(other.PendingAmount)
                ) && 
                (
                    this.DunningInvoices == other.DunningInvoices ||
                    this.DunningInvoices != null &&
                    this.DunningInvoices.Equals(other.DunningInvoices)
                ) && 
                (
                    this.DunningAmount == other.DunningAmount ||
                    this.DunningAmount != null &&
                    this.DunningAmount.Equals(other.DunningAmount)
                ) && 
                (
                    this.SettledInvoices == other.SettledInvoices ||
                    this.SettledInvoices != null &&
                    this.SettledInvoices.Equals(other.SettledInvoices)
                ) && 
                (
                    this.SettledAmount == other.SettledAmount ||
                    this.SettledAmount != null &&
                    this.SettledAmount.Equals(other.SettledAmount)
                ) && 
                (
                    this.RefundedAmount == other.RefundedAmount ||
                    this.RefundedAmount != null &&
                    this.RefundedAmount.Equals(other.RefundedAmount)
                ) && 
                (
                    this.PendingAdditionalCosts == other.PendingAdditionalCosts ||
                    this.PendingAdditionalCosts != null &&
                    this.PendingAdditionalCosts.Equals(other.PendingAdditionalCosts)
                ) && 
                (
                    this.PendingAdditionalCostAmount == other.PendingAdditionalCostAmount ||
                    this.PendingAdditionalCostAmount != null &&
                    this.PendingAdditionalCostAmount.Equals(other.PendingAdditionalCostAmount)
                ) && 
                (
                    this.TransferredAdditionalCosts == other.TransferredAdditionalCosts ||
                    this.TransferredAdditionalCosts != null &&
                    this.TransferredAdditionalCosts.Equals(other.TransferredAdditionalCosts)
                ) && 
                (
                    this.TransferredAdditionalCostAmount == other.TransferredAdditionalCostAmount ||
                    this.TransferredAdditionalCostAmount != null &&
                    this.TransferredAdditionalCostAmount.Equals(other.TransferredAdditionalCostAmount)
                ) && 
                (
                    this.PendingCredits == other.PendingCredits ||
                    this.PendingCredits != null &&
                    this.PendingCredits.Equals(other.PendingCredits)
                ) && 
                (
                    this.PendingCreditAmount == other.PendingCreditAmount ||
                    this.PendingCreditAmount != null &&
                    this.PendingCreditAmount.Equals(other.PendingCreditAmount)
                ) && 
                (
                    this.TransferredCredits == other.TransferredCredits ||
                    this.TransferredCredits != null &&
                    this.TransferredCredits.Equals(other.TransferredCredits)
                ) && 
                (
                    this.TransferredCreditAmount == other.TransferredCreditAmount ||
                    this.TransferredCreditAmount != null &&
                    this.TransferredCreditAmount.Equals(other.TransferredCreditAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Address2 != null)
                    hash = hash * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Vat != null)
                    hash = hash * 59 + this.Vat.GetHashCode();
                if (this.Handle != null)
                    hash = hash * 59 + this.Handle.GetHashCode();
                if (this.Test != null)
                    hash = hash * 59 + this.Test.GetHashCode();
                if (this.Subscriptions != null)
                    hash = hash * 59 + this.Subscriptions.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Deleted != null)
                    hash = hash * 59 + this.Deleted.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.ActiveSubscriptions != null)
                    hash = hash * 59 + this.ActiveSubscriptions.GetHashCode();
                if (this.TrialActiveSubscriptions != null)
                    hash = hash * 59 + this.TrialActiveSubscriptions.GetHashCode();
                if (this.TrialCancelledSubscriptions != null)
                    hash = hash * 59 + this.TrialCancelledSubscriptions.GetHashCode();
                if (this.ExpiredSubscriptions != null)
                    hash = hash * 59 + this.ExpiredSubscriptions.GetHashCode();
                if (this.OnHoldSubscriptions != null)
                    hash = hash * 59 + this.OnHoldSubscriptions.GetHashCode();
                if (this.CancelledSubscriptions != null)
                    hash = hash * 59 + this.CancelledSubscriptions.GetHashCode();
                if (this.NonRenewingSubscriptions != null)
                    hash = hash * 59 + this.NonRenewingSubscriptions.GetHashCode();
                if (this.FailedInvoices != null)
                    hash = hash * 59 + this.FailedInvoices.GetHashCode();
                if (this.FailedAmount != null)
                    hash = hash * 59 + this.FailedAmount.GetHashCode();
                if (this.CancelledInvoices != null)
                    hash = hash * 59 + this.CancelledInvoices.GetHashCode();
                if (this.CancelledAmount != null)
                    hash = hash * 59 + this.CancelledAmount.GetHashCode();
                if (this.PendingInvoices != null)
                    hash = hash * 59 + this.PendingInvoices.GetHashCode();
                if (this.PendingAmount != null)
                    hash = hash * 59 + this.PendingAmount.GetHashCode();
                if (this.DunningInvoices != null)
                    hash = hash * 59 + this.DunningInvoices.GetHashCode();
                if (this.DunningAmount != null)
                    hash = hash * 59 + this.DunningAmount.GetHashCode();
                if (this.SettledInvoices != null)
                    hash = hash * 59 + this.SettledInvoices.GetHashCode();
                if (this.SettledAmount != null)
                    hash = hash * 59 + this.SettledAmount.GetHashCode();
                if (this.RefundedAmount != null)
                    hash = hash * 59 + this.RefundedAmount.GetHashCode();
                if (this.PendingAdditionalCosts != null)
                    hash = hash * 59 + this.PendingAdditionalCosts.GetHashCode();
                if (this.PendingAdditionalCostAmount != null)
                    hash = hash * 59 + this.PendingAdditionalCostAmount.GetHashCode();
                if (this.TransferredAdditionalCosts != null)
                    hash = hash * 59 + this.TransferredAdditionalCosts.GetHashCode();
                if (this.TransferredAdditionalCostAmount != null)
                    hash = hash * 59 + this.TransferredAdditionalCostAmount.GetHashCode();
                if (this.PendingCredits != null)
                    hash = hash * 59 + this.PendingCredits.GetHashCode();
                if (this.PendingCreditAmount != null)
                    hash = hash * 59 + this.PendingCreditAmount.GetHashCode();
                if (this.TransferredCredits != null)
                    hash = hash * 59 + this.TransferredCredits.GetHashCode();
                if (this.TransferredCreditAmount != null)
                    hash = hash * 59 + this.TransferredCreditAmount.GetHashCode();
                return hash;
            }
        }
    }

}
