/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// CardGatewayAgreement
    /// </summary>
    [DataContract]
    public partial class CardGatewayAgreement :  IEquatable<CardGatewayAgreement>
    {
        /// <summary>
        /// Card gateway state:
        /// </summary>
        /// <value>Card gateway state:</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Active for "active"
            /// </summary>
            [EnumMember(Value = "active")]
            Active,
            
            /// <summary>
            /// Enum Inactive for "inactive"
            /// </summary>
            [EnumMember(Value = "inactive")]
            Inactive,
            
            /// <summary>
            /// Enum Deleted for "deleted"
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted
        }

        /// <summary>
        /// Card gateway state:
        /// </summary>
        /// <value>Card gateway state:</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardGatewayAgreement" /> class.
        /// </summary>
        [JsonConstructor]
        protected CardGatewayAgreement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardGatewayAgreement" /> class.
        /// </summary>
        /// <param name="Provider">Card types supported by agreement (required).</param>
        /// <param name="Id">Card gateway agreement id (required).</param>
        /// <param name="State">Card gateway state: (required).</param>
        /// <param name="CardTypes">Card types supported by agreement (required).</param>
        /// <param name="ProviderSettings">Key value map of provider settings.</param>
        /// <param name="GwRef">Card gateway reference id (required).</param>
        public CardGatewayAgreement(string Provider = null, string Id = null, StateEnum? State = null, List<string> CardTypes = null, Dictionary<string, Object> ProviderSettings = null, string GwRef = null)
        {
            // to ensure "Provider" is required (not null)
            if (Provider == null)
            {
                throw new InvalidDataException("Provider is a required property for CardGatewayAgreement and cannot be null");
            }
            else
            {
                this.Provider = Provider;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for CardGatewayAgreement and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for CardGatewayAgreement and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "CardTypes" is required (not null)
            if (CardTypes == null)
            {
                throw new InvalidDataException("CardTypes is a required property for CardGatewayAgreement and cannot be null");
            }
            else
            {
                this.CardTypes = CardTypes;
            }
            // to ensure "GwRef" is required (not null)
            if (GwRef == null)
            {
                throw new InvalidDataException("GwRef is a required property for CardGatewayAgreement and cannot be null");
            }
            else
            {
                this.GwRef = GwRef;
            }
            this.ProviderSettings = ProviderSettings;
        }
        
        /// <summary>
        /// Card types supported by agreement
        /// </summary>
        /// <value>Card types supported by agreement</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }
        /// <summary>
        /// Card gateway agreement id
        /// </summary>
        /// <value>Card gateway agreement id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Card types supported by agreement
        /// </summary>
        /// <value>Card types supported by agreement</value>
        [DataMember(Name="card_types", EmitDefaultValue=false)]
        public List<string> CardTypes { get; set; }
        /// <summary>
        /// Key value map of provider settings
        /// </summary>
        /// <value>Key value map of provider settings</value>
        [DataMember(Name="provider_settings", EmitDefaultValue=false)]
        public Dictionary<string, Object> ProviderSettings { get; set; }
        /// <summary>
        /// Card gateway reference id
        /// </summary>
        /// <value>Card gateway reference id</value>
        [DataMember(Name="gw_ref", EmitDefaultValue=false)]
        public string GwRef { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardGatewayAgreement {\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CardTypes: ").Append(CardTypes).Append("\n");
            sb.Append("  ProviderSettings: ").Append(ProviderSettings).Append("\n");
            sb.Append("  GwRef: ").Append(GwRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CardGatewayAgreement);
        }

        /// <summary>
        /// Returns true if CardGatewayAgreement instances are equal
        /// </summary>
        /// <param name="other">Instance of CardGatewayAgreement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardGatewayAgreement other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Provider == other.Provider ||
                    this.Provider != null &&
                    this.Provider.Equals(other.Provider)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.CardTypes == other.CardTypes ||
                    this.CardTypes != null &&
                    this.CardTypes.SequenceEqual(other.CardTypes)
                ) && 
                (
                    this.ProviderSettings == other.ProviderSettings ||
                    this.ProviderSettings != null &&
                    this.ProviderSettings.SequenceEqual(other.ProviderSettings)
                ) && 
                (
                    this.GwRef == other.GwRef ||
                    this.GwRef != null &&
                    this.GwRef.Equals(other.GwRef)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Provider != null)
                    hash = hash * 59 + this.Provider.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.CardTypes != null)
                    hash = hash * 59 + this.CardTypes.GetHashCode();
                if (this.ProviderSettings != null)
                    hash = hash * 59 + this.ProviderSettings.GetHashCode();
                if (this.GwRef != null)
                    hash = hash * 59 + this.GwRef.GetHashCode();
                return hash;
            }
        }
    }

}
