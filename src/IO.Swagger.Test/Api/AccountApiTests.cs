/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountApiTests
    {
        private AccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountApi
            //Assert.IsInstanceOfType(typeof(AccountApi), instance, "instance is a AccountApi");
        }

        
        /// <summary>
        /// Test CreatePrivateKey
        /// </summary>
        [Test]
        public void CreatePrivateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CreatePrivateKey();
            //Assert.IsInstanceOf<Key> (response, "response is Key");
        }
        
        /// <summary>
        /// Test CreatePublicKey
        /// </summary>
        [Test]
        public void CreatePublicKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CreatePublicKey();
            //Assert.IsInstanceOf<Key> (response, "response is Key");
        }
        
        /// <summary>
        /// Test ExpirePrivateKey
        /// </summary>
        [Test]
        public void ExpirePrivateKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //instance.ExpirePrivateKey(key);
            
        }
        
        /// <summary>
        /// Test ExpirePublicKey
        /// </summary>
        [Test]
        public void ExpirePublicKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = null;
            //instance.ExpirePublicKey(key);
            
        }
        
        /// <summary>
        /// Test GenerateWebhookSecret
        /// </summary>
        [Test]
        public void GenerateWebhookSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GenerateWebhookSecret();
            //Assert.IsInstanceOf<WebhookSettings> (response, "response is WebhookSettings");
        }
        
        /// <summary>
        /// Test GetCurrentAccount
        /// </summary>
        [Test]
        public void GetCurrentAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentAccount();
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test GetDiscountSettings
        /// </summary>
        [Test]
        public void GetDiscountSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDiscountSettings();
            //Assert.IsInstanceOf<DiscountSettings> (response, "response is DiscountSettings");
        }
        
        /// <summary>
        /// Test GetMailSettings
        /// </summary>
        [Test]
        public void GetMailSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMailSettings();
            //Assert.IsInstanceOf<MailSettings> (response, "response is MailSettings");
        }
        
        /// <summary>
        /// Test GetPrivateKeys
        /// </summary>
        [Test]
        public void GetPrivateKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPrivateKeys();
            //Assert.IsInstanceOf<List<Key>> (response, "response is List<Key>");
        }
        
        /// <summary>
        /// Test GetPublicKeys
        /// </summary>
        [Test]
        public void GetPublicKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPublicKeys();
            //Assert.IsInstanceOf<List<Key>> (response, "response is List<Key>");
        }
        
        /// <summary>
        /// Test GetWebhookSettings
        /// </summary>
        [Test]
        public void GetWebhookSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWebhookSettings();
            //Assert.IsInstanceOf<WebhookSettings> (response, "response is WebhookSettings");
        }
        
        /// <summary>
        /// Test UpdateAccountJson
        /// </summary>
        [Test]
        public void UpdateAccountJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateAccount body = null;
            //var response = instance.UpdateAccountJson(body);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test UpdateDiscountSettings
        /// </summary>
        [Test]
        public void UpdateDiscountSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DiscountSettings body = null;
            //var response = instance.UpdateDiscountSettings(body);
            //Assert.IsInstanceOf<DiscountSettings> (response, "response is DiscountSettings");
        }
        
        /// <summary>
        /// Test UpdateMailSettingsJson
        /// </summary>
        [Test]
        public void UpdateMailSettingsJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MailSettings body = null;
            //var response = instance.UpdateMailSettingsJson(body);
            //Assert.IsInstanceOf<MailSettings> (response, "response is MailSettings");
        }
        
        /// <summary>
        /// Test UpdateWebhookSettingsJson
        /// </summary>
        [Test]
        public void UpdateWebhookSettingsJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateWebhookSettings body = null;
            //var response = instance.UpdateWebhookSettingsJson(body);
            //Assert.IsInstanceOf<WebhookSettings> (response, "response is WebhookSettings");
        }
        
    }

}
