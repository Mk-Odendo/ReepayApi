/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ReepayApi.Client;
using ReepayApi.Model;

namespace ReepayApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel all dunning and pending
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>List&lt;Invoice&gt;</returns>
        List<Invoice> CancelAllDunningPending (string handle);

        /// <summary>
        /// Cancel all dunning and pending
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        ApiResponse<List<Invoice>> CancelAllDunningPendingWithHttpInfo (string handle);
        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Invoice</returns>
        Invoice CancelInvoice (string id);

        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> CancelInvoiceWithHttpInfo (string id);
        /// <summary>
        /// Get invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Invoice</returns>
        Invoice GetInvoice (string id);

        /// <summary>
        /// Get invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> GetInvoiceWithHttpInfo (string id);
        /// <summary>
        /// Get list of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>InvoiceSearch</returns>
        InvoiceSearch GetInvoices (int? page = null, int? size = null, string search = null, string sort = null);

        /// <summary>
        /// Get list of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>ApiResponse of InvoiceSearch</returns>
        ApiResponse<InvoiceSearch> GetInvoicesWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null);
        /// <summary>
        /// Manual settle
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        Invoice ManualSettle (string id, ManualSettleTransfer body = null);

        /// <summary>
        /// Manual settle
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> ManualSettleWithHttpInfo (string id, ManualSettleTransfer body = null);
        /// <summary>
        /// Reactivate invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Invoice</returns>
        Invoice ReactivateInvoice (string id);

        /// <summary>
        /// Reactivate invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> ReactivateInvoiceWithHttpInfo (string id);
        /// <summary>
        /// Refund settled invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        Invoice Refund (string id, RefundInvoice body = null);

        /// <summary>
        /// Refund settled invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> RefundWithHttpInfo (string id, RefundInvoice body = null);
        /// <summary>
        /// Get card transaction details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> TransactionDetails (string id, string transaction);

        /// <summary>
        /// Get card transaction details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> TransactionDetailsWithHttpInfo (string id, string transaction);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel all dunning and pending
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        System.Threading.Tasks.Task<List<Invoice>> CancelAllDunningPendingAsync (string handle);

        /// <summary>
        /// Cancel all dunning and pending
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Invoice>>> CancelAllDunningPendingAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> CancelInvoiceAsync (string id);

        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> CancelInvoiceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string id);

        /// <summary>
        /// Get invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get list of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of InvoiceSearch</returns>
        System.Threading.Tasks.Task<InvoiceSearch> GetInvoicesAsync (int? page = null, int? size = null, string search = null, string sort = null);

        /// <summary>
        /// Get list of invoices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of ApiResponse (InvoiceSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceSearch>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null);
        /// <summary>
        /// Manual settle
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> ManualSettleAsync (string id, ManualSettleTransfer body = null);

        /// <summary>
        /// Manual settle
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> ManualSettleAsyncWithHttpInfo (string id, ManualSettleTransfer body = null);
        /// <summary>
        /// Reactivate invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> ReactivateInvoiceAsync (string id);

        /// <summary>
        /// Reactivate invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> ReactivateInvoiceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Refund settled invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> RefundAsync (string id, RefundInvoice body = null);

        /// <summary>
        /// Refund settled invoice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> RefundAsyncWithHttpInfo (string id, RefundInvoice body = null);
        /// <summary>
        /// Get card transaction details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> TransactionDetailsAsync (string id, string transaction);

        /// <summary>
        /// Get card transaction details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> TransactionDetailsAsyncWithHttpInfo (string id, string transaction);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoiceApi : IInvoiceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel all dunning and pending 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>List&lt;Invoice&gt;</returns>
        public List<Invoice> CancelAllDunningPending (string handle)
        {
             ApiResponse<List<Invoice>> localVarResponse = CancelAllDunningPendingWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all dunning and pending 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>ApiResponse of List&lt;Invoice&gt;</returns>
        public ApiResponse< List<Invoice> > CancelAllDunningPendingWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling InvoiceApi->CancelAllDunningPending");

            var localVarPath = "/v1/invoice/cancel_all_dunning_pending/subscription/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAllDunningPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Invoice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Invoice>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Invoice>)));
            
        }

        /// <summary>
        /// Cancel all dunning and pending 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>Task of List&lt;Invoice&gt;</returns>
        public async System.Threading.Tasks.Task<List<Invoice>> CancelAllDunningPendingAsync (string handle)
        {
             ApiResponse<List<Invoice>> localVarResponse = await CancelAllDunningPendingAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all dunning and pending 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscriptiom handle</param>
        /// <returns>Task of ApiResponse (List&lt;Invoice&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Invoice>>> CancelAllDunningPendingAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling InvoiceApi->CancelAllDunningPending");

            var localVarPath = "/v1/invoice/cancel_all_dunning_pending/subscription/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAllDunningPending", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Invoice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Invoice>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Invoice>)));
            
        }

        /// <summary>
        /// Cancel invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Invoice</returns>
        public Invoice CancelInvoice (string id)
        {
             ApiResponse<Invoice> localVarResponse = CancelInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > CancelInvoiceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->CancelInvoice");

            var localVarPath = "/v1/invoice/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Cancel invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> CancelInvoiceAsync (string id)
        {
             ApiResponse<Invoice> localVarResponse = await CancelInvoiceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> CancelInvoiceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->CancelInvoice");

            var localVarPath = "/v1/invoice/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Get invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Invoice</returns>
        public Invoice GetInvoice (string id)
        {
             ApiResponse<Invoice> localVarResponse = GetInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > GetInvoiceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->GetInvoice");

            var localVarPath = "/v1/invoice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Get invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> GetInvoiceAsync (string id)
        {
             ApiResponse<Invoice> localVarResponse = await GetInvoiceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> GetInvoiceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->GetInvoice");

            var localVarPath = "/v1/invoice/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Get list of invoices 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>InvoiceSearch</returns>
        public InvoiceSearch GetInvoices (int? page = null, int? size = null, string search = null, string sort = null)
        {
             ApiResponse<InvoiceSearch> localVarResponse = GetInvoicesWithHttpInfo(page, size, search, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of invoices 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>ApiResponse of InvoiceSearch</returns>
        public ApiResponse< InvoiceSearch > GetInvoicesWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null)
        {

            var localVarPath = "/v1/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceSearch)));
            
        }

        /// <summary>
        /// Get list of invoices 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of InvoiceSearch</returns>
        public async System.Threading.Tasks.Task<InvoiceSearch> GetInvoicesAsync (int? page = null, int? size = null, string search = null, string sort = null)
        {
             ApiResponse<InvoiceSearch> localVarResponse = await GetInvoicesAsyncWithHttpInfo(page, size, search, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of invoices 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of ApiResponse (InvoiceSearch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoiceSearch>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null)
        {

            var localVarPath = "/v1/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceSearch)));
            
        }

        /// <summary>
        /// Manual settle 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice ManualSettle (string id, ManualSettleTransfer body = null)
        {
             ApiResponse<Invoice> localVarResponse = ManualSettleWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Manual settle 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > ManualSettleWithHttpInfo (string id, ManualSettleTransfer body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->ManualSettle");

            var localVarPath = "/v1/invoice/{id}/manual_settle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ManualSettle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Manual settle 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> ManualSettleAsync (string id, ManualSettleTransfer body = null)
        {
             ApiResponse<Invoice> localVarResponse = await ManualSettleAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Manual settle 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> ManualSettleAsyncWithHttpInfo (string id, ManualSettleTransfer body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->ManualSettle");

            var localVarPath = "/v1/invoice/{id}/manual_settle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ManualSettle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Reactivate invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Invoice</returns>
        public Invoice ReactivateInvoice (string id)
        {
             ApiResponse<Invoice> localVarResponse = ReactivateInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reactivate invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > ReactivateInvoiceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->ReactivateInvoice");

            var localVarPath = "/v1/invoice/{id}/reactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReactivateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Reactivate invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> ReactivateInvoiceAsync (string id)
        {
             ApiResponse<Invoice> localVarResponse = await ReactivateInvoiceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reactivate invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> ReactivateInvoiceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->ReactivateInvoice");

            var localVarPath = "/v1/invoice/{id}/reactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReactivateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Refund settled invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice Refund (string id, RefundInvoice body = null)
        {
             ApiResponse<Invoice> localVarResponse = RefundWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refund settled invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > RefundWithHttpInfo (string id, RefundInvoice body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->Refund");

            var localVarPath = "/v1/invoice/{id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Refund settled invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> RefundAsync (string id, RefundInvoice body = null)
        {
             ApiResponse<Invoice> localVarResponse = await RefundAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refund settled invoice 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> RefundAsyncWithHttpInfo (string id, RefundInvoice body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->Refund");

            var localVarPath = "/v1/invoice/{id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Refund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Get card transaction details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> TransactionDetails (string id, string transaction)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = TransactionDetailsWithHttpInfo(id, transaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get card transaction details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > TransactionDetailsWithHttpInfo (string id, string transaction)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->TransactionDetails");
            // verify the required parameter 'transaction' is set
            if (transaction == null)
                throw new ApiException(400, "Missing required parameter 'transaction' when calling InvoiceApi->TransactionDetails");

            var localVarPath = "/v1/invoice/{id}/card_transaction/{transaction}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (transaction != null) localVarPathParams.Add("transaction", Configuration.ApiClient.ParameterToString(transaction)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
            
        }

        /// <summary>
        /// Get card transaction details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> TransactionDetailsAsync (string id, string transaction)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await TransactionDetailsAsyncWithHttpInfo(id, transaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get card transaction details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Invoice id</param>
        /// <param name="transaction">Transaction id</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> TransactionDetailsAsyncWithHttpInfo (string id, string transaction)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoiceApi->TransactionDetails");
            // verify the required parameter 'transaction' is set
            if (transaction == null)
                throw new ApiException(400, "Missing required parameter 'transaction' when calling InvoiceApi->TransactionDetails");

            var localVarPath = "/v1/invoice/{id}/card_transaction/{transaction}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (transaction != null) localVarPathParams.Add("transaction", Configuration.ApiClient.ParameterToString(transaction)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
            
        }

    }
}
