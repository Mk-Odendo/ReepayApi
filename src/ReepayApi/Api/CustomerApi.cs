/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ReepayApi.Client;
using ReepayApi.Model;

namespace ReepayApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>PaymentMethods</returns>
        PaymentMethods ActivatePaymentMethod (string handle, string methodId);

        /// <summary>
        /// Activate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        ApiResponse<PaymentMethods> ActivatePaymentMethodWithHttpInfo (string handle, string methodId);
        /// <summary>
        /// Add card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Card</returns>
        Card AddCardJson (string handle, CardToken body = null);

        /// <summary>
        /// Add card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> AddCardJsonWithHttpInfo (string handle, CardToken body = null);
        /// <summary>
        /// Create invoice ondemand for customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        Invoice CreateCustomerInvoice (string handle, CreateCustomerInvoice body = null);

        /// <summary>
        /// Create invoice ondemand for customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> CreateCustomerInvoiceWithHttpInfo (string handle, CreateCustomerInvoice body = null);
        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        Customer CreateCustomerJson (CreateCustomer body = null);

        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerJsonWithHttpInfo (CreateCustomer body = null);
        /// <summary>
        /// Create customer note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomerNote</returns>
        CustomerNote CreateCustomerNoteJson (string handle, CreateCustomerNote body = null);

        /// <summary>
        /// Create customer note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomerNote</returns>
        ApiResponse<CustomerNote> CreateCustomerNoteJsonWithHttpInfo (string handle, CreateCustomerNote body = null);
        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Customer</returns>
        Customer DeleteCustomer (string handle);

        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> DeleteCustomerWithHttpInfo (string handle);
        /// <summary>
        /// Get card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Card</returns>
        Card GetCard (string handle, string id);

        /// <summary>
        /// Get card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> GetCardWithHttpInfo (string handle, string id);
        /// <summary>
        /// Get gateway card details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetCardDetails (string handle, string id);

        /// <summary>
        /// Get gateway card details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetCardDetailsWithHttpInfo (string handle, string id);
        /// <summary>
        /// Get customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Customer</returns>
        Customer GetCustomer (string handle);

        /// <summary>
        /// Get customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> GetCustomerWithHttpInfo (string handle);
        /// <summary>
        /// Get customer notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>List&lt;CustomerNote&gt;</returns>
        List<CustomerNote> GetCustomerNotes (string handle);

        /// <summary>
        /// Get customer notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of List&lt;CustomerNote&gt;</returns>
        ApiResponse<List<CustomerNote>> GetCustomerNotesWithHttpInfo (string handle);
        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>PaymentMethods</returns>
        PaymentMethods GetCustomerPaymentMethods (string handle);

        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        ApiResponse<PaymentMethods> GetCustomerPaymentMethodsWithHttpInfo (string handle);
        /// <summary>
        /// Get list of customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>CustomerSearch</returns>
        CustomerSearch GetCustomers (int? page = null, int? size = null, string search = null, string sort = null);

        /// <summary>
        /// Get list of customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>ApiResponse of CustomerSearch</returns>
        ApiResponse<CustomerSearch> GetCustomersWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null);
        /// <summary>
        /// Import card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Card</returns>
        Card ImportCardJson (string handle, CardImport body = null);

        /// <summary>
        /// Import card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> ImportCardJsonWithHttpInfo (string handle, CardImport body = null);
        /// <summary>
        /// Inactivate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>PaymentMethods</returns>
        PaymentMethods InactivatePaymentMethod (string handle, string methodId);

        /// <summary>
        /// Inactivate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        ApiResponse<PaymentMethods> InactivatePaymentMethodWithHttpInfo (string handle, string methodId);
        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        Customer UpdateCustomerJson (string handle, UpdateCustomer body = null);

        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> UpdateCustomerJsonWithHttpInfo (string handle, UpdateCustomer body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of PaymentMethods</returns>
        System.Threading.Tasks.Task<PaymentMethods> ActivatePaymentMethodAsync (string handle, string methodId);

        /// <summary>
        /// Activate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> ActivatePaymentMethodAsyncWithHttpInfo (string handle, string methodId);
        /// <summary>
        /// Add card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> AddCardJsonAsync (string handle, CardToken body = null);

        /// <summary>
        /// Add card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> AddCardJsonAsyncWithHttpInfo (string handle, CardToken body = null);
        /// <summary>
        /// Create invoice ondemand for customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> CreateCustomerInvoiceAsync (string handle, CreateCustomerInvoice body = null);

        /// <summary>
        /// Create invoice ondemand for customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> CreateCustomerInvoiceAsyncWithHttpInfo (string handle, CreateCustomerInvoice body = null);
        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerJsonAsync (CreateCustomer body = null);

        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerJsonAsyncWithHttpInfo (CreateCustomer body = null);
        /// <summary>
        /// Create customer note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CustomerNote</returns>
        System.Threading.Tasks.Task<CustomerNote> CreateCustomerNoteJsonAsync (string handle, CreateCustomerNote body = null);

        /// <summary>
        /// Create customer note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerNote>> CreateCustomerNoteJsonAsyncWithHttpInfo (string handle, CreateCustomerNote body = null);
        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> DeleteCustomerAsync (string handle);

        /// <summary>
        /// Delete customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> DeleteCustomerAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> GetCardAsync (string handle, string id);

        /// <summary>
        /// Get card
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> GetCardAsyncWithHttpInfo (string handle, string id);
        /// <summary>
        /// Get gateway card details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetCardDetailsAsync (string handle, string id);

        /// <summary>
        /// Get gateway card details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetCardDetailsAsyncWithHttpInfo (string handle, string id);
        /// <summary>
        /// Get customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> GetCustomerAsync (string handle);

        /// <summary>
        /// Get customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get customer notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of List&lt;CustomerNote&gt;</returns>
        System.Threading.Tasks.Task<List<CustomerNote>> GetCustomerNotesAsync (string handle);

        /// <summary>
        /// Get customer notes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (List&lt;CustomerNote&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomerNote>>> GetCustomerNotesAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of PaymentMethods</returns>
        System.Threading.Tasks.Task<PaymentMethods> GetCustomerPaymentMethodsAsync (string handle);

        /// <summary>
        /// Get payment methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> GetCustomerPaymentMethodsAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get list of customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of CustomerSearch</returns>
        System.Threading.Tasks.Task<CustomerSearch> GetCustomersAsync (int? page = null, int? size = null, string search = null, string sort = null);

        /// <summary>
        /// Get list of customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of ApiResponse (CustomerSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerSearch>> GetCustomersAsyncWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null);
        /// <summary>
        /// Import card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> ImportCardJsonAsync (string handle, CardImport body = null);

        /// <summary>
        /// Import card payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> ImportCardJsonAsyncWithHttpInfo (string handle, CardImport body = null);
        /// <summary>
        /// Inactivate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of PaymentMethods</returns>
        System.Threading.Tasks.Task<PaymentMethods> InactivatePaymentMethodAsync (string handle, string methodId);

        /// <summary>
        /// Inactivate payment method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> InactivatePaymentMethodAsyncWithHttpInfo (string handle, string methodId);
        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> UpdateCustomerJsonAsync (string handle, UpdateCustomer body = null);

        /// <summary>
        /// Update customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> UpdateCustomerJsonAsyncWithHttpInfo (string handle, UpdateCustomer body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerApi : ICustomerApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>PaymentMethods</returns>
        public PaymentMethods ActivatePaymentMethod (string handle, string methodId)
        {
             ApiResponse<PaymentMethods> localVarResponse = ActivatePaymentMethodWithHttpInfo(handle, methodId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        public ApiResponse< PaymentMethods > ActivatePaymentMethodWithHttpInfo (string handle, string methodId)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->ActivatePaymentMethod");
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling CustomerApi->ActivatePaymentMethod");

            var localVarPath = "/v1/customer/{handle}/payment_method/{method_id}/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (methodId != null) localVarPathParams.Add("method_id", Configuration.ApiClient.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Activate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of PaymentMethods</returns>
        public async System.Threading.Tasks.Task<PaymentMethods> ActivatePaymentMethodAsync (string handle, string methodId)
        {
             ApiResponse<PaymentMethods> localVarResponse = await ActivatePaymentMethodAsyncWithHttpInfo(handle, methodId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> ActivatePaymentMethodAsyncWithHttpInfo (string handle, string methodId)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->ActivatePaymentMethod");
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling CustomerApi->ActivatePaymentMethod");

            var localVarPath = "/v1/customer/{handle}/payment_method/{method_id}/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (methodId != null) localVarPathParams.Add("method_id", Configuration.ApiClient.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivatePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Add card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Card</returns>
        public Card AddCardJson (string handle, CardToken body = null)
        {
             ApiResponse<Card> localVarResponse = AddCardJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > AddCardJsonWithHttpInfo (string handle, CardToken body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->AddCardJson");

            var localVarPath = "/v1/customer/{handle}/payment_method/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCardJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
            
        }

        /// <summary>
        /// Add card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> AddCardJsonAsync (string handle, CardToken body = null)
        {
             ApiResponse<Card> localVarResponse = await AddCardJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> AddCardJsonAsyncWithHttpInfo (string handle, CardToken body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->AddCardJson");

            var localVarPath = "/v1/customer/{handle}/payment_method/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCardJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
            
        }

        /// <summary>
        /// Create invoice ondemand for customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Invoice</returns>
        public Invoice CreateCustomerInvoice (string handle, CreateCustomerInvoice body = null)
        {
             ApiResponse<Invoice> localVarResponse = CreateCustomerInvoiceWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create invoice ondemand for customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse< Invoice > CreateCustomerInvoiceWithHttpInfo (string handle, CreateCustomerInvoice body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->CreateCustomerInvoice");

            var localVarPath = "/v1/customer/{handle}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomerInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Create invoice ondemand for customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> CreateCustomerInvoiceAsync (string handle, CreateCustomerInvoice body = null)
        {
             ApiResponse<Invoice> localVarResponse = await CreateCustomerInvoiceAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create invoice ondemand for customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> CreateCustomerInvoiceAsyncWithHttpInfo (string handle, CreateCustomerInvoice body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->CreateCustomerInvoice");

            var localVarPath = "/v1/customer/{handle}/invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomerInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Invoice) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
            
        }

        /// <summary>
        /// Create customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomerJson (CreateCustomer body = null)
        {
             ApiResponse<Customer> localVarResponse = CreateCustomerJsonWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > CreateCustomerJsonWithHttpInfo (CreateCustomer body = null)
        {

            var localVarPath = "/v1/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomerJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Create customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerJsonAsync (CreateCustomer body = null)
        {
             ApiResponse<Customer> localVarResponse = await CreateCustomerJsonAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerJsonAsyncWithHttpInfo (CreateCustomer body = null)
        {

            var localVarPath = "/v1/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomerJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Create customer note 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CustomerNote</returns>
        public CustomerNote CreateCustomerNoteJson (string handle, CreateCustomerNote body = null)
        {
             ApiResponse<CustomerNote> localVarResponse = CreateCustomerNoteJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create customer note 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CustomerNote</returns>
        public ApiResponse< CustomerNote > CreateCustomerNoteJsonWithHttpInfo (string handle, CreateCustomerNote body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->CreateCustomerNoteJson");

            var localVarPath = "/v1/customer/{handle}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomerNoteJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerNote) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerNote)));
            
        }

        /// <summary>
        /// Create customer note 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CustomerNote</returns>
        public async System.Threading.Tasks.Task<CustomerNote> CreateCustomerNoteJsonAsync (string handle, CreateCustomerNote body = null)
        {
             ApiResponse<CustomerNote> localVarResponse = await CreateCustomerNoteJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create customer note 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerNote>> CreateCustomerNoteJsonAsyncWithHttpInfo (string handle, CreateCustomerNote body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->CreateCustomerNoteJson");

            var localVarPath = "/v1/customer/{handle}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomerNoteJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerNote) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerNote)));
            
        }

        /// <summary>
        /// Delete customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Customer</returns>
        public Customer DeleteCustomer (string handle)
        {
             ApiResponse<Customer> localVarResponse = DeleteCustomerWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > DeleteCustomerWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->DeleteCustomer");

            var localVarPath = "/v1/customer/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Delete customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> DeleteCustomerAsync (string handle)
        {
             ApiResponse<Customer> localVarResponse = await DeleteCustomerAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> DeleteCustomerAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->DeleteCustomer");

            var localVarPath = "/v1/customer/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Get card 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Card</returns>
        public Card GetCard (string handle, string id)
        {
             ApiResponse<Card> localVarResponse = GetCardWithHttpInfo(handle, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get card 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > GetCardWithHttpInfo (string handle, string id)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCard");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->GetCard");

            var localVarPath = "/v1/customer/{handle}/payment_method/card/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
            
        }

        /// <summary>
        /// Get card 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> GetCardAsync (string handle, string id)
        {
             ApiResponse<Card> localVarResponse = await GetCardAsyncWithHttpInfo(handle, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get card 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> GetCardAsyncWithHttpInfo (string handle, string id)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCard");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->GetCard");

            var localVarPath = "/v1/customer/{handle}/payment_method/card/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
            
        }

        /// <summary>
        /// Get gateway card details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetCardDetails (string handle, string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GetCardDetailsWithHttpInfo(handle, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get gateway card details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GetCardDetailsWithHttpInfo (string handle, string id)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCardDetails");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->GetCardDetails");

            var localVarPath = "/v1/customer/{handle}/payment_method/card/{id}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
            
        }

        /// <summary>
        /// Get gateway card details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetCardDetailsAsync (string handle, string id)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GetCardDetailsAsyncWithHttpInfo(handle, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get gateway card details 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="id">Card id</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetCardDetailsAsyncWithHttpInfo (string handle, string id)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCardDetails");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomerApi->GetCardDetails");

            var localVarPath = "/v1/customer/{handle}/payment_method/card/{id}/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
            
        }

        /// <summary>
        /// Get customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Customer</returns>
        public Customer GetCustomer (string handle)
        {
             ApiResponse<Customer> localVarResponse = GetCustomerWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > GetCustomerWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCustomer");

            var localVarPath = "/v1/customer/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Get customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> GetCustomerAsync (string handle)
        {
             ApiResponse<Customer> localVarResponse = await GetCustomerAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCustomer");

            var localVarPath = "/v1/customer/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Get customer notes 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>List&lt;CustomerNote&gt;</returns>
        public List<CustomerNote> GetCustomerNotes (string handle)
        {
             ApiResponse<List<CustomerNote>> localVarResponse = GetCustomerNotesWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer notes 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of List&lt;CustomerNote&gt;</returns>
        public ApiResponse< List<CustomerNote> > GetCustomerNotesWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCustomerNotes");

            var localVarPath = "/v1/customer/{handle}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomerNote>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomerNote>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomerNote>)));
            
        }

        /// <summary>
        /// Get customer notes 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of List&lt;CustomerNote&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomerNote>> GetCustomerNotesAsync (string handle)
        {
             ApiResponse<List<CustomerNote>> localVarResponse = await GetCustomerNotesAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer notes 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (List&lt;CustomerNote&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomerNote>>> GetCustomerNotesAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCustomerNotes");

            var localVarPath = "/v1/customer/{handle}/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomerNote>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomerNote>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomerNote>)));
            
        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>PaymentMethods</returns>
        public PaymentMethods GetCustomerPaymentMethods (string handle)
        {
             ApiResponse<PaymentMethods> localVarResponse = GetCustomerPaymentMethodsWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        public ApiResponse< PaymentMethods > GetCustomerPaymentMethodsWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCustomerPaymentMethods");

            var localVarPath = "/v1/customer/{handle}/payment_method";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of PaymentMethods</returns>
        public async System.Threading.Tasks.Task<PaymentMethods> GetCustomerPaymentMethodsAsync (string handle)
        {
             ApiResponse<PaymentMethods> localVarResponse = await GetCustomerPaymentMethodsAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payment methods 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> GetCustomerPaymentMethodsAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->GetCustomerPaymentMethods");

            var localVarPath = "/v1/customer/{handle}/payment_method";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerPaymentMethods", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Get list of customers 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>CustomerSearch</returns>
        public CustomerSearch GetCustomers (int? page = null, int? size = null, string search = null, string sort = null)
        {
             ApiResponse<CustomerSearch> localVarResponse = GetCustomersWithHttpInfo(page, size, search, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of customers 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>ApiResponse of CustomerSearch</returns>
        public ApiResponse< CustomerSearch > GetCustomersWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null)
        {

            var localVarPath = "/v1/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerSearch)));
            
        }

        /// <summary>
        /// Get list of customers 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of CustomerSearch</returns>
        public async System.Threading.Tasks.Task<CustomerSearch> GetCustomersAsync (int? page = null, int? size = null, string search = null, string sort = null)
        {
             ApiResponse<CustomerSearch> localVarResponse = await GetCustomersAsyncWithHttpInfo(page, size, search, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of customers 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to get (optional, default to 1)</param>
        /// <param name="size">Page size to use (optional, default to 20)</param>
        /// <param name="search">Optional search expression (optional)</param>
        /// <param name="sort">Optional sorting expression (optional)</param>
        /// <returns>Task of ApiResponse (CustomerSearch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerSearch>> GetCustomersAsyncWithHttpInfo (int? page = null, int? size = null, string search = null, string sort = null)
        {

            var localVarPath = "/v1/customer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerSearch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerSearch)));
            
        }

        /// <summary>
        /// Import card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Card</returns>
        public Card ImportCardJson (string handle, CardImport body = null)
        {
             ApiResponse<Card> localVarResponse = ImportCardJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > ImportCardJsonWithHttpInfo (string handle, CardImport body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->ImportCardJson");

            var localVarPath = "/v1/customer/{handle}/payment_method/card_import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCardJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
            
        }

        /// <summary>
        /// Import card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> ImportCardJsonAsync (string handle, CardImport body = null)
        {
             ApiResponse<Card> localVarResponse = await ImportCardJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import card payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> ImportCardJsonAsyncWithHttpInfo (string handle, CardImport body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->ImportCardJson");

            var localVarPath = "/v1/customer/{handle}/payment_method/card_import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCardJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
            
        }

        /// <summary>
        /// Inactivate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>PaymentMethods</returns>
        public PaymentMethods InactivatePaymentMethod (string handle, string methodId)
        {
             ApiResponse<PaymentMethods> localVarResponse = InactivatePaymentMethodWithHttpInfo(handle, methodId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Inactivate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>ApiResponse of PaymentMethods</returns>
        public ApiResponse< PaymentMethods > InactivatePaymentMethodWithHttpInfo (string handle, string methodId)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->InactivatePaymentMethod");
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling CustomerApi->InactivatePaymentMethod");

            var localVarPath = "/v1/customer/{handle}/payment_method/{method_id}/inactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (methodId != null) localVarPathParams.Add("method_id", Configuration.ApiClient.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InactivatePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Inactivate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of PaymentMethods</returns>
        public async System.Threading.Tasks.Task<PaymentMethods> InactivatePaymentMethodAsync (string handle, string methodId)
        {
             ApiResponse<PaymentMethods> localVarResponse = await InactivatePaymentMethodAsyncWithHttpInfo(handle, methodId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Inactivate payment method 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="methodId">Payment method id</param>
        /// <returns>Task of ApiResponse (PaymentMethods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentMethods>> InactivatePaymentMethodAsyncWithHttpInfo (string handle, string methodId)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->InactivatePaymentMethod");
            // verify the required parameter 'methodId' is set
            if (methodId == null)
                throw new ApiException(400, "Missing required parameter 'methodId' when calling CustomerApi->InactivatePaymentMethod");

            var localVarPath = "/v1/customer/{handle}/payment_method/{method_id}/inactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (methodId != null) localVarPathParams.Add("method_id", Configuration.ApiClient.ParameterToString(methodId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InactivatePaymentMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentMethods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentMethods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentMethods)));
            
        }

        /// <summary>
        /// Update customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Customer</returns>
        public Customer UpdateCustomerJson (string handle, UpdateCustomer body = null)
        {
             ApiResponse<Customer> localVarResponse = UpdateCustomerJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse< Customer > UpdateCustomerJsonWithHttpInfo (string handle, UpdateCustomer body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->UpdateCustomerJson");

            var localVarPath = "/v1/customer/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

        /// <summary>
        /// Update customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> UpdateCustomerJsonAsync (string handle, UpdateCustomer body = null)
        {
             ApiResponse<Customer> localVarResponse = await UpdateCustomerJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update customer 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Customer handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> UpdateCustomerJsonAsyncWithHttpInfo (string handle, UpdateCustomer body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling CustomerApi->UpdateCustomerJson");

            var localVarPath = "/v1/customer/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomerJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Customer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
            
        }

    }
}
