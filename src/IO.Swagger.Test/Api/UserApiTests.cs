/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserApi
            //Assert.IsInstanceOfType(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test DeleteUser
        /// </summary>
        [Test]
        public void DeleteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteUser(id);
            
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUser(id);
            //Assert.IsInstanceOf<UserAccount> (response, "response is UserAccount");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUsers();
            //Assert.IsInstanceOf<List<UserAccount>> (response, "response is List<UserAccount>");
        }
        
        /// <summary>
        /// Test InviteUser
        /// </summary>
        [Test]
        public void InviteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InviteUser body = null;
            //var response = instance.InviteUser(body);
            //Assert.IsInstanceOf<UserAccount> (response, "response is UserAccount");
        }
        
        /// <summary>
        /// Test InviteUserAccept
        /// </summary>
        [Test]
        public void InviteUserAcceptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //InviteUserAccept body = null;
            //var response = instance.InviteUserAccept(token, body);
            //Assert.IsInstanceOf<UserAccount> (response, "response is UserAccount");
        }
        
        /// <summary>
        /// Test InviteUserGet
        /// </summary>
        [Test]
        public void InviteUserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.InviteUserGet(token);
            //Assert.IsInstanceOf<UserAccount> (response, "response is UserAccount");
        }
        
        /// <summary>
        /// Test ResetPassword
        /// </summary>
        [Test]
        public void ResetPasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserResetRequestPassword body = null;
            //instance.ResetPassword(body);
            
        }
        
        /// <summary>
        /// Test ResetPasswordWithToken
        /// </summary>
        [Test]
        public void ResetPasswordWithTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //UpdateUserPassword body = null;
            //var response = instance.ResetPasswordWithToken(token, body);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UpdateAuth
        /// </summary>
        [Test]
        public void UpdateAuthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateUserGroups body = null;
            //var response = instance.UpdateAuth(id, body);
            //Assert.IsInstanceOf<UserAccount> (response, "response is UserAccount");
        }
        
        /// <summary>
        /// Test UpdatePassword
        /// </summary>
        [Test]
        public void UpdatePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateUserPassword body = null;
            //var response = instance.UpdatePassword(id, body);
            //Assert.IsInstanceOf<UserAccount> (response, "response is UserAccount");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UpdateUser body = null;
            //var response = instance.UpdateUser(id, body);
            //Assert.IsInstanceOf<UserAccount> (response, "response is UserAccount");
        }
        
        /// <summary>
        /// Test VerifyEmail
        /// </summary>
        [Test]
        public void VerifyEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //var response = instance.VerifyEmail(token);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test VerifyEmailRequest
        /// </summary>
        [Test]
        public void VerifyEmailRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.VerifyEmailRequest(id);
            
        }
        
    }

}
