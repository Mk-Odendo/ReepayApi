/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ReepayApi.Client;
using ReepayApi.Model;

namespace ReepayApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Plan</returns>
        Plan CreatePlanJson (CreateSubscriptionPlan body = null);

        /// <summary>
        /// Create plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> CreatePlanJsonWithHttpInfo (CreateSubscriptionPlan body = null);
        /// <summary>
        /// Delete plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>Plan</returns>
        Plan DeletePlan (string handle);

        /// <summary>
        /// Delete plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> DeletePlanWithHttpInfo (string handle);
        /// <summary>
        /// Get plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Plan</returns>
        Plan GetCurrentPlan (string handle);

        /// <summary>
        /// Get plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> GetCurrentPlanWithHttpInfo (string handle);
        /// <summary>
        /// Get plan version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>Plan</returns>
        Plan GetPlan (string handle, int? version);

        /// <summary>
        /// Get plan version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> GetPlanWithHttpInfo (string handle, int? version);
        /// <summary>
        /// Get list of plan versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>List&lt;Plan&gt;</returns>
        List<Plan> GetPlans (string handle);

        /// <summary>
        /// Get list of plan versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>ApiResponse of List&lt;Plan&gt;</returns>
        ApiResponse<List<Plan>> GetPlansWithHttpInfo (string handle);
        /// <summary>
        /// Get list of plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>List&lt;Plan&gt;</returns>
        List<Plan> GetPlansList (bool? onlyActive = null);

        /// <summary>
        /// Get list of plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Plan&gt;</returns>
        ApiResponse<List<Plan>> GetPlansListWithHttpInfo (bool? onlyActive = null);
        /// <summary>
        /// Supersede plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Plan</returns>
        Plan SupersedePlanJson (string handle, SupersedeSubscriptionPlan body = null);

        /// <summary>
        /// Supersede plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> SupersedePlanJsonWithHttpInfo (string handle, SupersedeSubscriptionPlan body = null);
        /// <summary>
        /// Update plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Plan</returns>
        Plan UpdatePlanJson (string handle, UpdateSubscriptionPlan body = null);

        /// <summary>
        /// Update plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> UpdatePlanJsonWithHttpInfo (string handle, UpdateSubscriptionPlan body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> CreatePlanJsonAsync (CreateSubscriptionPlan body = null);

        /// <summary>
        /// Create plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> CreatePlanJsonAsyncWithHttpInfo (CreateSubscriptionPlan body = null);
        /// <summary>
        /// Delete plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> DeletePlanAsync (string handle);

        /// <summary>
        /// Delete plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> DeletePlanAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> GetCurrentPlanAsync (string handle);

        /// <summary>
        /// Get plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> GetCurrentPlanAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get plan version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> GetPlanAsync (string handle, int? version);

        /// <summary>
        /// Get plan version
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> GetPlanAsyncWithHttpInfo (string handle, int? version);
        /// <summary>
        /// Get list of plan versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of List&lt;Plan&gt;</returns>
        System.Threading.Tasks.Task<List<Plan>> GetPlansAsync (string handle);

        /// <summary>
        /// Get list of plan versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of ApiResponse (List&lt;Plan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Plan>>> GetPlansAsyncWithHttpInfo (string handle);
        /// <summary>
        /// Get list of plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>Task of List&lt;Plan&gt;</returns>
        System.Threading.Tasks.Task<List<Plan>> GetPlansListAsync (bool? onlyActive = null);

        /// <summary>
        /// Get list of plans
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Plan&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Plan>>> GetPlansListAsyncWithHttpInfo (bool? onlyActive = null);
        /// <summary>
        /// Supersede plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> SupersedePlanJsonAsync (string handle, SupersedeSubscriptionPlan body = null);

        /// <summary>
        /// Supersede plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> SupersedePlanJsonAsyncWithHttpInfo (string handle, SupersedeSubscriptionPlan body = null);
        /// <summary>
        /// Update plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> UpdatePlanJsonAsync (string handle, UpdateSubscriptionPlan body = null);

        /// <summary>
        /// Update plan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> UpdatePlanJsonAsyncWithHttpInfo (string handle, UpdateSubscriptionPlan body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlanApi : IPlanApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlanApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlanApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Plan</returns>
        public Plan CreatePlanJson (CreateSubscriptionPlan body = null)
        {
             ApiResponse<Plan> localVarResponse = CreatePlanJsonWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse< Plan > CreatePlanJsonWithHttpInfo (CreateSubscriptionPlan body = null)
        {

            var localVarPath = "/v1/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Create plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> CreatePlanJsonAsync (CreateSubscriptionPlan body = null)
        {
             ApiResponse<Plan> localVarResponse = await CreatePlanJsonAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> CreatePlanJsonAsyncWithHttpInfo (CreateSubscriptionPlan body = null)
        {

            var localVarPath = "/v1/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Delete plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>Plan</returns>
        public Plan DeletePlan (string handle)
        {
             ApiResponse<Plan> localVarResponse = DeletePlanWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse< Plan > DeletePlanWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->DeletePlan");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Delete plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> DeletePlanAsync (string handle)
        {
             ApiResponse<Plan> localVarResponse = await DeletePlanAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription plan handle</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> DeletePlanAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->DeletePlan");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Get plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Plan</returns>
        public Plan GetCurrentPlan (string handle)
        {
             ApiResponse<Plan> localVarResponse = GetCurrentPlanWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse< Plan > GetCurrentPlanWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->GetCurrentPlan");

            var localVarPath = "/v1/plan/{handle}/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Get plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> GetCurrentPlanAsync (string handle)
        {
             ApiResponse<Plan> localVarResponse = await GetCurrentPlanAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> GetCurrentPlanAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->GetCurrentPlan");

            var localVarPath = "/v1/plan/{handle}/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Get plan version 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>Plan</returns>
        public Plan GetPlan (string handle, int? version)
        {
             ApiResponse<Plan> localVarResponse = GetPlanWithHttpInfo(handle, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get plan version 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse< Plan > GetPlanWithHttpInfo (string handle, int? version)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->GetPlan");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PlanApi->GetPlan");

            var localVarPath = "/v1/plan/{handle}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Get plan version 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> GetPlanAsync (string handle, int? version)
        {
             ApiResponse<Plan> localVarResponse = await GetPlanAsyncWithHttpInfo(handle, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get plan version 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="version">Plan version</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> GetPlanAsyncWithHttpInfo (string handle, int? version)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->GetPlan");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling PlanApi->GetPlan");

            var localVarPath = "/v1/plan/{handle}/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Get list of plan versions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>List&lt;Plan&gt;</returns>
        public List<Plan> GetPlans (string handle)
        {
             ApiResponse<List<Plan>> localVarResponse = GetPlansWithHttpInfo(handle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of plan versions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>ApiResponse of List&lt;Plan&gt;</returns>
        public ApiResponse< List<Plan> > GetPlansWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->GetPlans");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Plan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Plan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Plan>)));
            
        }

        /// <summary>
        /// Get list of plan versions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of List&lt;Plan&gt;</returns>
        public async System.Threading.Tasks.Task<List<Plan>> GetPlansAsync (string handle)
        {
             ApiResponse<List<Plan>> localVarResponse = await GetPlansAsyncWithHttpInfo(handle);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of plan versions 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <returns>Task of ApiResponse (List&lt;Plan&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Plan>>> GetPlansAsyncWithHttpInfo (string handle)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->GetPlans");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Plan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Plan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Plan>)));
            
        }

        /// <summary>
        /// Get list of plans 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>List&lt;Plan&gt;</returns>
        public List<Plan> GetPlansList (bool? onlyActive = null)
        {
             ApiResponse<List<Plan>> localVarResponse = GetPlansListWithHttpInfo(onlyActive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of plans 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Plan&gt;</returns>
        public ApiResponse< List<Plan> > GetPlansListWithHttpInfo (bool? onlyActive = null)
        {

            var localVarPath = "/v1/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (onlyActive != null) localVarQueryParams.Add("only_active", Configuration.ApiClient.ParameterToString(onlyActive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlansList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Plan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Plan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Plan>)));
            
        }

        /// <summary>
        /// Get list of plans 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>Task of List&lt;Plan&gt;</returns>
        public async System.Threading.Tasks.Task<List<Plan>> GetPlansListAsync (bool? onlyActive = null)
        {
             ApiResponse<List<Plan>> localVarResponse = await GetPlansListAsyncWithHttpInfo(onlyActive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of plans 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyActive"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;Plan&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Plan>>> GetPlansListAsyncWithHttpInfo (bool? onlyActive = null)
        {

            var localVarPath = "/v1/plan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (onlyActive != null) localVarQueryParams.Add("only_active", Configuration.ApiClient.ParameterToString(onlyActive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlansList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Plan>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Plan>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Plan>)));
            
        }

        /// <summary>
        /// Supersede plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Plan</returns>
        public Plan SupersedePlanJson (string handle, SupersedeSubscriptionPlan body = null)
        {
             ApiResponse<Plan> localVarResponse = SupersedePlanJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Supersede plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse< Plan > SupersedePlanJsonWithHttpInfo (string handle, SupersedeSubscriptionPlan body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->SupersedePlanJson");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupersedePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Supersede plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> SupersedePlanJsonAsync (string handle, SupersedeSubscriptionPlan body = null)
        {
             ApiResponse<Plan> localVarResponse = await SupersedePlanJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Supersede plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Plan handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> SupersedePlanJsonAsyncWithHttpInfo (string handle, SupersedeSubscriptionPlan body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->SupersedePlanJson");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SupersedePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Update plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Plan</returns>
        public Plan UpdatePlanJson (string handle, UpdateSubscriptionPlan body = null)
        {
             ApiResponse<Plan> localVarResponse = UpdatePlanJsonWithHttpInfo(handle, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse< Plan > UpdatePlanJsonWithHttpInfo (string handle, UpdateSubscriptionPlan body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->UpdatePlanJson");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

        /// <summary>
        /// Update plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> UpdatePlanJsonAsync (string handle, UpdateSubscriptionPlan body = null)
        {
             ApiResponse<Plan> localVarResponse = await UpdatePlanJsonAsyncWithHttpInfo(handle, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update plan 
        /// </summary>
        /// <exception cref="ReepayApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="handle">Subscription handle</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> UpdatePlanJsonAsyncWithHttpInfo (string handle, UpdateSubscriptionPlan body = null)
        {
            // verify the required parameter 'handle' is set
            if (handle == null)
                throw new ApiException(400, "Missing required parameter 'handle' when calling PlanApi->UpdatePlanJson");

            var localVarPath = "/v1/plan/{handle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (handle != null) localVarPathParams.Add("handle", Configuration.ApiClient.ParameterToString(handle)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlanJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Plan) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
            
        }

    }
}
