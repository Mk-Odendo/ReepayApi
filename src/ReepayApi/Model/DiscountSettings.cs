/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// DiscountSettings
    /// </summary>
    [DataContract]
    public partial class DiscountSettings :  IEquatable<DiscountSettings>
    {
        /// <summary>
        /// The order to apply multiple discounts in, one of the following: `percentage_first`, `amount_first`
        /// </summary>
        /// <value>The order to apply multiple discounts in, one of the following: `percentage_first`, `amount_first`</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountApplyOrderEnum
        {
            
            /// <summary>
            /// Enum Percentagefirst for "percentage_first"
            /// </summary>
            [EnumMember(Value = "percentage_first")]
            Percentagefirst,
            
            /// <summary>
            /// Enum Amountfirst for "amount_first"
            /// </summary>
            [EnumMember(Value = "amount_first")]
            Amountfirst
        }

        /// <summary>
        /// The rule for applying multiple percentage discounts, one of the following: `full`, `compound`
        /// </summary>
        /// <value>The rule for applying multiple percentage discounts, one of the following: `full`, `compound`</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountPercentageApplyEnum
        {
            
            /// <summary>
            /// Enum Full for "full"
            /// </summary>
            [EnumMember(Value = "full")]
            Full,
            
            /// <summary>
            /// Enum Compound for "compound"
            /// </summary>
            [EnumMember(Value = "compound")]
            Compound
        }

        /// <summary>
        /// The order to apply multiple discounts in, one of the following: `percentage_first`, `amount_first`
        /// </summary>
        /// <value>The order to apply multiple discounts in, one of the following: `percentage_first`, `amount_first`</value>
        [DataMember(Name="discount_apply_order", EmitDefaultValue=false)]
        public DiscountApplyOrderEnum? DiscountApplyOrder { get; set; }
        /// <summary>
        /// The rule for applying multiple percentage discounts, one of the following: `full`, `compound`
        /// </summary>
        /// <value>The rule for applying multiple percentage discounts, one of the following: `full`, `compound`</value>
        [DataMember(Name="discount_percentage_apply", EmitDefaultValue=false)]
        public DiscountPercentageApplyEnum? DiscountPercentageApply { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountSettings" /> class.
        /// </summary>
        [JsonConstructor]
        protected DiscountSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountSettings" /> class.
        /// </summary>
        /// <param name="DiscountApplyOrder">The order to apply multiple discounts in, one of the following: &#x60;percentage_first&#x60;, &#x60;amount_first&#x60; (required).</param>
        /// <param name="DiscountPercentageApply">The rule for applying multiple percentage discounts, one of the following: &#x60;full&#x60;, &#x60;compound&#x60; (required).</param>
        /// <param name="MultipleAllowed">If multiple discounts per subscription is allowed (required) (default to false).</param>
        public DiscountSettings(DiscountApplyOrderEnum? DiscountApplyOrder = null, DiscountPercentageApplyEnum? DiscountPercentageApply = null, bool? MultipleAllowed = null)
        {
            // to ensure "DiscountApplyOrder" is required (not null)
            if (DiscountApplyOrder == null)
            {
                throw new InvalidDataException("DiscountApplyOrder is a required property for DiscountSettings and cannot be null");
            }
            else
            {
                this.DiscountApplyOrder = DiscountApplyOrder;
            }
            // to ensure "DiscountPercentageApply" is required (not null)
            if (DiscountPercentageApply == null)
            {
                throw new InvalidDataException("DiscountPercentageApply is a required property for DiscountSettings and cannot be null");
            }
            else
            {
                this.DiscountPercentageApply = DiscountPercentageApply;
            }
            // to ensure "MultipleAllowed" is required (not null)
            if (MultipleAllowed == null)
            {
                throw new InvalidDataException("MultipleAllowed is a required property for DiscountSettings and cannot be null");
            }
            else
            {
                this.MultipleAllowed = MultipleAllowed;
            }
        }
        
        /// <summary>
        /// If multiple discounts per subscription is allowed
        /// </summary>
        /// <value>If multiple discounts per subscription is allowed</value>
        [DataMember(Name="multiple_allowed", EmitDefaultValue=false)]
        public bool? MultipleAllowed { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscountSettings {\n");
            sb.Append("  DiscountApplyOrder: ").Append(DiscountApplyOrder).Append("\n");
            sb.Append("  DiscountPercentageApply: ").Append(DiscountPercentageApply).Append("\n");
            sb.Append("  MultipleAllowed: ").Append(MultipleAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DiscountSettings);
        }

        /// <summary>
        /// Returns true if DiscountSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscountSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscountSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DiscountApplyOrder == other.DiscountApplyOrder ||
                    this.DiscountApplyOrder != null &&
                    this.DiscountApplyOrder.Equals(other.DiscountApplyOrder)
                ) && 
                (
                    this.DiscountPercentageApply == other.DiscountPercentageApply ||
                    this.DiscountPercentageApply != null &&
                    this.DiscountPercentageApply.Equals(other.DiscountPercentageApply)
                ) && 
                (
                    this.MultipleAllowed == other.MultipleAllowed ||
                    this.MultipleAllowed != null &&
                    this.MultipleAllowed.Equals(other.MultipleAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DiscountApplyOrder != null)
                    hash = hash * 59 + this.DiscountApplyOrder.GetHashCode();
                if (this.DiscountPercentageApply != null)
                    hash = hash * 59 + this.DiscountPercentageApply.GetHashCode();
                if (this.MultipleAllowed != null)
                    hash = hash * 59 + this.MultipleAllowed.GetHashCode();
                return hash;
            }
        }
    }

}
