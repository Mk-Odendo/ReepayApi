/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// CreateCredit
    /// </summary>
    [DataContract]
    public partial class CreateCredit :  IEquatable<CreateCredit>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCredit" /> class.
        /// </summary>
        [JsonConstructor]
        protected CreateCredit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCredit" /> class.
        /// </summary>
        /// <param name="Subscription">Subscription by handle to add the credit to (required).</param>
        /// <param name="Handle">Per account unique handle for the credit. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. (required).</param>
        /// <param name="Amount">Credit amount in the smallest unit for the account currency (required).</param>
        /// <param name="Text">Text describing the credit. Will be on affected invoices. (required).</param>
        /// <param name="ValidFrom">Date on the form yyyy-MM-dd from which the credit is valid. The credit will not be deducted from invoices before this date..</param>
        public CreateCredit(string Subscription = null, string Handle = null, int? Amount = null, string Text = null, string ValidFrom = null)
        {
            // to ensure "Subscription" is required (not null)
            if (Subscription == null)
            {
                throw new InvalidDataException("Subscription is a required property for CreateCredit and cannot be null");
            }
            else
            {
                this.Subscription = Subscription;
            }
            // to ensure "Handle" is required (not null)
            if (Handle == null)
            {
                throw new InvalidDataException("Handle is a required property for CreateCredit and cannot be null");
            }
            else
            {
                this.Handle = Handle;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for CreateCredit and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for CreateCredit and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            this.ValidFrom = ValidFrom;
        }
        
        /// <summary>
        /// Subscription by handle to add the credit to
        /// </summary>
        /// <value>Subscription by handle to add the credit to</value>
        [DataMember(Name="subscription", EmitDefaultValue=false)]
        public string Subscription { get; set; }
        /// <summary>
        /// Per account unique handle for the credit. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
        /// </summary>
        /// <value>Per account unique handle for the credit. Max length 255 with allowable characters [a-zA-Z0-9_.-@].</value>
        [DataMember(Name="handle", EmitDefaultValue=false)]
        public string Handle { get; set; }
        /// <summary>
        /// Credit amount in the smallest unit for the account currency
        /// </summary>
        /// <value>Credit amount in the smallest unit for the account currency</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }
        /// <summary>
        /// Text describing the credit. Will be on affected invoices.
        /// </summary>
        /// <value>Text describing the credit. Will be on affected invoices.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Date on the form yyyy-MM-dd from which the credit is valid. The credit will not be deducted from invoices before this date.
        /// </summary>
        /// <value>Date on the form yyyy-MM-dd from which the credit is valid. The credit will not be deducted from invoices before this date.</value>
        [DataMember(Name="valid_from", EmitDefaultValue=false)]
        public string ValidFrom { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCredit {\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateCredit);
        }

        /// <summary>
        /// Returns true if CreateCredit instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateCredit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCredit other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Subscription == other.Subscription ||
                    this.Subscription != null &&
                    this.Subscription.Equals(other.Subscription)
                ) && 
                (
                    this.Handle == other.Handle ||
                    this.Handle != null &&
                    this.Handle.Equals(other.Handle)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.ValidFrom == other.ValidFrom ||
                    this.ValidFrom != null &&
                    this.ValidFrom.Equals(other.ValidFrom)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Subscription != null)
                    hash = hash * 59 + this.Subscription.GetHashCode();
                if (this.Handle != null)
                    hash = hash * 59 + this.Handle.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.ValidFrom != null)
                    hash = hash * 59 + this.ValidFrom.GetHashCode();
                return hash;
            }
        }
    }

}
