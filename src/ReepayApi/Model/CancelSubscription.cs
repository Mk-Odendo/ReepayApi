/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// CancelSubscription
    /// </summary>
    [DataContract]
    public partial class CancelSubscription :  IEquatable<CancelSubscription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelSubscription" /> class.
        /// </summary>
        /// <param name="NoticePeriods">Optional override of the notice periods set for plan. See plan for the definition of notice periods..</param>
        /// <param name="NoticePeriodsAfterCurrent">Optional override of the notice periods after current setting for plan. See plan for the definition of notice periods. (default to false).</param>
        /// <param name="ExpireAt">Optional fixed date and time on when the subscription should expire. The fixed expire date takes precedence over notice periods and fixation periods. The fixed expire date must be after the end of the current periods. On the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;..</param>
        public CancelSubscription(int? NoticePeriods = null, bool? NoticePeriodsAfterCurrent = null, string ExpireAt = null)
        {
            this.NoticePeriods = NoticePeriods;
            // use default value if no "NoticePeriodsAfterCurrent" provided
            if (NoticePeriodsAfterCurrent == null)
            {
                this.NoticePeriodsAfterCurrent = false;
            }
            else
            {
                this.NoticePeriodsAfterCurrent = NoticePeriodsAfterCurrent;
            }
            this.ExpireAt = ExpireAt;
        }
        
        /// <summary>
        /// Optional override of the notice periods set for plan. See plan for the definition of notice periods.
        /// </summary>
        /// <value>Optional override of the notice periods set for plan. See plan for the definition of notice periods.</value>
        [DataMember(Name="notice_periods", EmitDefaultValue=false)]
        public int? NoticePeriods { get; set; }
        /// <summary>
        /// Optional override of the notice periods after current setting for plan. See plan for the definition of notice periods.
        /// </summary>
        /// <value>Optional override of the notice periods after current setting for plan. See plan for the definition of notice periods.</value>
        [DataMember(Name="notice_periods_after_current", EmitDefaultValue=false)]
        public bool? NoticePeriodsAfterCurrent { get; set; }
        /// <summary>
        /// Optional fixed date and time on when the subscription should expire. The fixed expire date takes precedence over notice periods and fixation periods. The fixed expire date must be after the end of the current periods. On the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;.
        /// </summary>
        /// <value>Optional fixed date and time on when the subscription should expire. The fixed expire date takes precedence over notice periods and fixation periods. The fixed expire date must be after the end of the current periods. On the form &#x60;yyyy-MM-dd&#x60;, &#x60;yyyyMMdd&#x60;, &#x60;yyyy-MM-ddTHH:mm&#x60; and &#x60;yyyy-MM-ddTHH:mm:ss&#x60;.</value>
        [DataMember(Name="expire_at", EmitDefaultValue=false)]
        public string ExpireAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CancelSubscription {\n");
            sb.Append("  NoticePeriods: ").Append(NoticePeriods).Append("\n");
            sb.Append("  NoticePeriodsAfterCurrent: ").Append(NoticePeriodsAfterCurrent).Append("\n");
            sb.Append("  ExpireAt: ").Append(ExpireAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CancelSubscription);
        }

        /// <summary>
        /// Returns true if CancelSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of CancelSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelSubscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NoticePeriods == other.NoticePeriods ||
                    this.NoticePeriods != null &&
                    this.NoticePeriods.Equals(other.NoticePeriods)
                ) && 
                (
                    this.NoticePeriodsAfterCurrent == other.NoticePeriodsAfterCurrent ||
                    this.NoticePeriodsAfterCurrent != null &&
                    this.NoticePeriodsAfterCurrent.Equals(other.NoticePeriodsAfterCurrent)
                ) && 
                (
                    this.ExpireAt == other.ExpireAt ||
                    this.ExpireAt != null &&
                    this.ExpireAt.Equals(other.ExpireAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NoticePeriods != null)
                    hash = hash * 59 + this.NoticePeriods.GetHashCode();
                if (this.NoticePeriodsAfterCurrent != null)
                    hash = hash * 59 + this.NoticePeriodsAfterCurrent.GetHashCode();
                if (this.ExpireAt != null)
                    hash = hash * 59 + this.ExpireAt.GetHashCode();
                return hash;
            }
        }
    }

}
