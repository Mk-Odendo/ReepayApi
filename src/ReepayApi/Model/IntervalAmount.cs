/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// IntervalAmount
    /// </summary>
    [DataContract]
    public partial class IntervalAmount :  IEquatable<IntervalAmount>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntervalAmount" /> class.
        /// </summary>
        [JsonConstructor]
        public IntervalAmount()
        {
        }
        
        /// <summary>
        /// From date on the form yyyy-MM-dd
        /// </summary>
        /// <value>From date on the form yyyy-MM-dd</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; private set; }
        /// <summary>
        /// To date on the form yyyy-MM-dd
        /// </summary>
        /// <value>To date on the form yyyy-MM-dd</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; private set; }
        /// <summary>
        /// Amount corresponding to the interval in the smallest unit for the currency
        /// </summary>
        /// <value>Amount corresponding to the interval in the smallest unit for the currency</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; private set; }
        /// <summary>
        /// Currency in ISO 4217 three letter alpha code
        /// </summary>
        /// <value>Currency in ISO 4217 three letter alpha code</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntervalAmount {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IntervalAmount);
        }

        /// <summary>
        /// Returns true if IntervalAmount instances are equal
        /// </summary>
        /// <param name="other">Instance of IntervalAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntervalAmount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.Equals(other.To)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                return hash;
            }
        }
    }

}
