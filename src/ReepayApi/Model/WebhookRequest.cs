/* 
 * Reepay API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ReepayApi.Model
{
    /// <summary>
    /// WebhookRequest
    /// </summary>
    [DataContract]
    public partial class WebhookRequest :  IEquatable<WebhookRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookRequest" /> class.
        /// </summary>
        [JsonConstructor]
        public WebhookRequest()
        {
        }
        
        /// <summary>
        /// Unique webhook id assigned by Reepay
        /// </summary>
        /// <value>Unique webhook id assigned by Reepay</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }
        /// <summary>
        /// Date when the webhook request was initiated, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
        /// </summary>
        /// <value>Date when the webhook request was initiated, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.</value>
        [DataMember(Name="initiated", EmitDefaultValue=false)]
        public DateTime? Initiated { get; private set; }
        /// <summary>
        /// Duration in milliseconds of request
        /// </summary>
        /// <value>Duration in milliseconds of request</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public long? Duration { get; private set; }
        /// <summary>
        /// HTTP headers received, null if no response
        /// </summary>
        /// <value>HTTP headers received, null if no response</value>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public string Headers { get; private set; }
        /// <summary>
        /// Truncated content received, null if no response
        /// </summary>
        /// <value>Truncated content received, null if no response</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; private set; }
        /// <summary>
        /// HTTP status code received, null if no response
        /// </summary>
        /// <value>HTTP status code received, null if no response</value>
        [DataMember(Name="http_status", EmitDefaultValue=false)]
        public int? HttpStatus { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Initiated: ").Append(Initiated).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  HttpStatus: ").Append(HttpStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WebhookRequest);
        }

        /// <summary>
        /// Returns true if WebhookRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of WebhookRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Initiated == other.Initiated ||
                    this.Initiated != null &&
                    this.Initiated.Equals(other.Initiated)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.Headers == other.Headers ||
                    this.Headers != null &&
                    this.Headers.Equals(other.Headers)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.HttpStatus == other.HttpStatus ||
                    this.HttpStatus != null &&
                    this.HttpStatus.Equals(other.HttpStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Initiated != null)
                    hash = hash * 59 + this.Initiated.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.Headers != null)
                    hash = hash * 59 + this.Headers.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.HttpStatus != null)
                    hash = hash * 59 + this.HttpStatus.GetHashCode();
                return hash;
            }
        }
    }

}
